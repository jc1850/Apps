// Generated by view binder compiler. Do not edit!
package org.adaway.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.Space;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.constraintlayout.widget.Barrier;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.constraintlayout.widget.Guideline;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.progressindicator.LinearProgressIndicator;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.adaway.R;

public final class HomeContentBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final CardView allowedHostCardView;

  @NonNull
  public final TextView allowedHostCounterTextView;

  @NonNull
  public final ImageView allowedHostImageView;

  @NonNull
  public final TextView allowedHostTextView;

  @NonNull
  public final TextView appDescriptionTextView;

  @NonNull
  public final TextView appNameTextView;

  @NonNull
  public final Space badge1Space;

  @NonNull
  public final Space badge2Space;

  @NonNull
  public final Barrier barrier;

  @NonNull
  public final CardView blockedHostCardView;

  @NonNull
  public final TextView blockedHostCounterTextView;

  @NonNull
  public final ImageView blockedHostImageView;

  @NonNull
  public final TextView blockedHostTextView;

  @NonNull
  public final ImageView checkForUpdateImageView;

  @NonNull
  public final Guideline guideline;

  @NonNull
  public final FrameLayout headerFrameLayout;

  @NonNull
  public final CardView helpCardView;

  @NonNull
  public final ImageView helpImageView;

  @NonNull
  public final TextView helpTextView;

  @NonNull
  public final CardView logCardView;

  @NonNull
  public final TextView logTextView;

  @NonNull
  public final ImageView logoImageView;

  @NonNull
  public final TextView outdatedSourcesTextView;

  @NonNull
  public final ImageView projectImageView;

  @NonNull
  public final CardView redirectHostCardView;

  @NonNull
  public final TextView redirectHostCounterTextView;

  @NonNull
  public final ImageView redirectHostImageView;

  @NonNull
  public final TextView redirectHostTextView;

  @NonNull
  public final ImageView sourceImageView;

  @NonNull
  public final CardView sourcesCardView;

  @NonNull
  public final LinearProgressIndicator sourcesProgressBar;

  @NonNull
  public final TextView stateTextView;

  @NonNull
  public final CardView supportCardView;

  @NonNull
  public final ImageView supportImageView;

  @NonNull
  public final TextView supportTextView;

  @NonNull
  public final TextView upToDateSourcesTextView;

  @NonNull
  public final ImageView updateImageView;

  @NonNull
  public final TextView versionTextView;

  private HomeContentBinding(@NonNull ConstraintLayout rootView,
      @NonNull CardView allowedHostCardView, @NonNull TextView allowedHostCounterTextView,
      @NonNull ImageView allowedHostImageView, @NonNull TextView allowedHostTextView,
      @NonNull TextView appDescriptionTextView, @NonNull TextView appNameTextView,
      @NonNull Space badge1Space, @NonNull Space badge2Space, @NonNull Barrier barrier,
      @NonNull CardView blockedHostCardView, @NonNull TextView blockedHostCounterTextView,
      @NonNull ImageView blockedHostImageView, @NonNull TextView blockedHostTextView,
      @NonNull ImageView checkForUpdateImageView, @NonNull Guideline guideline,
      @NonNull FrameLayout headerFrameLayout, @NonNull CardView helpCardView,
      @NonNull ImageView helpImageView, @NonNull TextView helpTextView,
      @NonNull CardView logCardView, @NonNull TextView logTextView,
      @NonNull ImageView logoImageView, @NonNull TextView outdatedSourcesTextView,
      @NonNull ImageView projectImageView, @NonNull CardView redirectHostCardView,
      @NonNull TextView redirectHostCounterTextView, @NonNull ImageView redirectHostImageView,
      @NonNull TextView redirectHostTextView, @NonNull ImageView sourceImageView,
      @NonNull CardView sourcesCardView, @NonNull LinearProgressIndicator sourcesProgressBar,
      @NonNull TextView stateTextView, @NonNull CardView supportCardView,
      @NonNull ImageView supportImageView, @NonNull TextView supportTextView,
      @NonNull TextView upToDateSourcesTextView, @NonNull ImageView updateImageView,
      @NonNull TextView versionTextView) {
    this.rootView = rootView;
    this.allowedHostCardView = allowedHostCardView;
    this.allowedHostCounterTextView = allowedHostCounterTextView;
    this.allowedHostImageView = allowedHostImageView;
    this.allowedHostTextView = allowedHostTextView;
    this.appDescriptionTextView = appDescriptionTextView;
    this.appNameTextView = appNameTextView;
    this.badge1Space = badge1Space;
    this.badge2Space = badge2Space;
    this.barrier = barrier;
    this.blockedHostCardView = blockedHostCardView;
    this.blockedHostCounterTextView = blockedHostCounterTextView;
    this.blockedHostImageView = blockedHostImageView;
    this.blockedHostTextView = blockedHostTextView;
    this.checkForUpdateImageView = checkForUpdateImageView;
    this.guideline = guideline;
    this.headerFrameLayout = headerFrameLayout;
    this.helpCardView = helpCardView;
    this.helpImageView = helpImageView;
    this.helpTextView = helpTextView;
    this.logCardView = logCardView;
    this.logTextView = logTextView;
    this.logoImageView = logoImageView;
    this.outdatedSourcesTextView = outdatedSourcesTextView;
    this.projectImageView = projectImageView;
    this.redirectHostCardView = redirectHostCardView;
    this.redirectHostCounterTextView = redirectHostCounterTextView;
    this.redirectHostImageView = redirectHostImageView;
    this.redirectHostTextView = redirectHostTextView;
    this.sourceImageView = sourceImageView;
    this.sourcesCardView = sourcesCardView;
    this.sourcesProgressBar = sourcesProgressBar;
    this.stateTextView = stateTextView;
    this.supportCardView = supportCardView;
    this.supportImageView = supportImageView;
    this.supportTextView = supportTextView;
    this.upToDateSourcesTextView = upToDateSourcesTextView;
    this.updateImageView = updateImageView;
    this.versionTextView = versionTextView;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static HomeContentBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static HomeContentBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.home_content, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static HomeContentBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.allowedHostCardView;
      CardView allowedHostCardView = ViewBindings.findChildViewById(rootView, id);
      if (allowedHostCardView == null) {
        break missingId;
      }

      id = R.id.allowedHostCounterTextView;
      TextView allowedHostCounterTextView = ViewBindings.findChildViewById(rootView, id);
      if (allowedHostCounterTextView == null) {
        break missingId;
      }

      id = R.id.allowedHostImageView;
      ImageView allowedHostImageView = ViewBindings.findChildViewById(rootView, id);
      if (allowedHostImageView == null) {
        break missingId;
      }

      id = R.id.allowedHostTextView;
      TextView allowedHostTextView = ViewBindings.findChildViewById(rootView, id);
      if (allowedHostTextView == null) {
        break missingId;
      }

      id = R.id.appDescriptionTextView;
      TextView appDescriptionTextView = ViewBindings.findChildViewById(rootView, id);
      if (appDescriptionTextView == null) {
        break missingId;
      }

      id = R.id.appNameTextView;
      TextView appNameTextView = ViewBindings.findChildViewById(rootView, id);
      if (appNameTextView == null) {
        break missingId;
      }

      id = R.id.badge1Space;
      Space badge1Space = ViewBindings.findChildViewById(rootView, id);
      if (badge1Space == null) {
        break missingId;
      }

      id = R.id.badge2Space;
      Space badge2Space = ViewBindings.findChildViewById(rootView, id);
      if (badge2Space == null) {
        break missingId;
      }

      id = R.id.barrier;
      Barrier barrier = ViewBindings.findChildViewById(rootView, id);
      if (barrier == null) {
        break missingId;
      }

      id = R.id.blockedHostCardView;
      CardView blockedHostCardView = ViewBindings.findChildViewById(rootView, id);
      if (blockedHostCardView == null) {
        break missingId;
      }

      id = R.id.blockedHostCounterTextView;
      TextView blockedHostCounterTextView = ViewBindings.findChildViewById(rootView, id);
      if (blockedHostCounterTextView == null) {
        break missingId;
      }

      id = R.id.blockedHostImageView;
      ImageView blockedHostImageView = ViewBindings.findChildViewById(rootView, id);
      if (blockedHostImageView == null) {
        break missingId;
      }

      id = R.id.blockedHostTextView;
      TextView blockedHostTextView = ViewBindings.findChildViewById(rootView, id);
      if (blockedHostTextView == null) {
        break missingId;
      }

      id = R.id.checkForUpdateImageView;
      ImageView checkForUpdateImageView = ViewBindings.findChildViewById(rootView, id);
      if (checkForUpdateImageView == null) {
        break missingId;
      }

      id = R.id.guideline;
      Guideline guideline = ViewBindings.findChildViewById(rootView, id);
      if (guideline == null) {
        break missingId;
      }

      id = R.id.headerFrameLayout;
      FrameLayout headerFrameLayout = ViewBindings.findChildViewById(rootView, id);
      if (headerFrameLayout == null) {
        break missingId;
      }

      id = R.id.helpCardView;
      CardView helpCardView = ViewBindings.findChildViewById(rootView, id);
      if (helpCardView == null) {
        break missingId;
      }

      id = R.id.helpImageView;
      ImageView helpImageView = ViewBindings.findChildViewById(rootView, id);
      if (helpImageView == null) {
        break missingId;
      }

      id = R.id.helpTextView;
      TextView helpTextView = ViewBindings.findChildViewById(rootView, id);
      if (helpTextView == null) {
        break missingId;
      }

      id = R.id.logCardView;
      CardView logCardView = ViewBindings.findChildViewById(rootView, id);
      if (logCardView == null) {
        break missingId;
      }

      id = R.id.logTextView;
      TextView logTextView = ViewBindings.findChildViewById(rootView, id);
      if (logTextView == null) {
        break missingId;
      }

      id = R.id.logoImageView;
      ImageView logoImageView = ViewBindings.findChildViewById(rootView, id);
      if (logoImageView == null) {
        break missingId;
      }

      id = R.id.outdatedSourcesTextView;
      TextView outdatedSourcesTextView = ViewBindings.findChildViewById(rootView, id);
      if (outdatedSourcesTextView == null) {
        break missingId;
      }

      id = R.id.projectImageView;
      ImageView projectImageView = ViewBindings.findChildViewById(rootView, id);
      if (projectImageView == null) {
        break missingId;
      }

      id = R.id.redirectHostCardView;
      CardView redirectHostCardView = ViewBindings.findChildViewById(rootView, id);
      if (redirectHostCardView == null) {
        break missingId;
      }

      id = R.id.redirectHostCounterTextView;
      TextView redirectHostCounterTextView = ViewBindings.findChildViewById(rootView, id);
      if (redirectHostCounterTextView == null) {
        break missingId;
      }

      id = R.id.redirectHostImageView;
      ImageView redirectHostImageView = ViewBindings.findChildViewById(rootView, id);
      if (redirectHostImageView == null) {
        break missingId;
      }

      id = R.id.redirectHostTextView;
      TextView redirectHostTextView = ViewBindings.findChildViewById(rootView, id);
      if (redirectHostTextView == null) {
        break missingId;
      }

      id = R.id.sourceImageView;
      ImageView sourceImageView = ViewBindings.findChildViewById(rootView, id);
      if (sourceImageView == null) {
        break missingId;
      }

      id = R.id.sourcesCardView;
      CardView sourcesCardView = ViewBindings.findChildViewById(rootView, id);
      if (sourcesCardView == null) {
        break missingId;
      }

      id = R.id.sourcesProgressBar;
      LinearProgressIndicator sourcesProgressBar = ViewBindings.findChildViewById(rootView, id);
      if (sourcesProgressBar == null) {
        break missingId;
      }

      id = R.id.stateTextView;
      TextView stateTextView = ViewBindings.findChildViewById(rootView, id);
      if (stateTextView == null) {
        break missingId;
      }

      id = R.id.supportCardView;
      CardView supportCardView = ViewBindings.findChildViewById(rootView, id);
      if (supportCardView == null) {
        break missingId;
      }

      id = R.id.supportImageView;
      ImageView supportImageView = ViewBindings.findChildViewById(rootView, id);
      if (supportImageView == null) {
        break missingId;
      }

      id = R.id.supportTextView;
      TextView supportTextView = ViewBindings.findChildViewById(rootView, id);
      if (supportTextView == null) {
        break missingId;
      }

      id = R.id.upToDateSourcesTextView;
      TextView upToDateSourcesTextView = ViewBindings.findChildViewById(rootView, id);
      if (upToDateSourcesTextView == null) {
        break missingId;
      }

      id = R.id.updateImageView;
      ImageView updateImageView = ViewBindings.findChildViewById(rootView, id);
      if (updateImageView == null) {
        break missingId;
      }

      id = R.id.versionTextView;
      TextView versionTextView = ViewBindings.findChildViewById(rootView, id);
      if (versionTextView == null) {
        break missingId;
      }

      return new HomeContentBinding((ConstraintLayout) rootView, allowedHostCardView,
          allowedHostCounterTextView, allowedHostImageView, allowedHostTextView,
          appDescriptionTextView, appNameTextView, badge1Space, badge2Space, barrier,
          blockedHostCardView, blockedHostCounterTextView, blockedHostImageView,
          blockedHostTextView, checkForUpdateImageView, guideline, headerFrameLayout, helpCardView,
          helpImageView, helpTextView, logCardView, logTextView, logoImageView,
          outdatedSourcesTextView, projectImageView, redirectHostCardView,
          redirectHostCounterTextView, redirectHostImageView, redirectHostTextView, sourceImageView,
          sourcesCardView, sourcesProgressBar, stateTextView, supportCardView, supportImageView,
          supportTextView, upToDateSourcesTextView, updateImageView, versionTextView);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
