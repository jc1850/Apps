// Generated by Dagger (https://dagger.dev).
package org.openobservatory.ooniprobe.domain;

import android.content.Context;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import org.openobservatory.ooniprobe.client.OONIAPIClient;
import org.openobservatory.ooniprobe.common.JsonPrinter;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MeasurementsManager_Factory implements Factory<MeasurementsManager> {
  private final Provider<Context> contextProvider;

  private final Provider<JsonPrinter> jsonPrinterProvider;

  private final Provider<OONIAPIClient> apiClientProvider;

  private final Provider<OkHttpClient> httpClientProvider;

  public MeasurementsManager_Factory(Provider<Context> contextProvider,
      Provider<JsonPrinter> jsonPrinterProvider, Provider<OONIAPIClient> apiClientProvider,
      Provider<OkHttpClient> httpClientProvider) {
    this.contextProvider = contextProvider;
    this.jsonPrinterProvider = jsonPrinterProvider;
    this.apiClientProvider = apiClientProvider;
    this.httpClientProvider = httpClientProvider;
  }

  @Override
  public MeasurementsManager get() {
    return newInstance(contextProvider.get(), jsonPrinterProvider.get(), apiClientProvider.get(), httpClientProvider.get());
  }

  public static MeasurementsManager_Factory create(Provider<Context> contextProvider,
      Provider<JsonPrinter> jsonPrinterProvider, Provider<OONIAPIClient> apiClientProvider,
      Provider<OkHttpClient> httpClientProvider) {
    return new MeasurementsManager_Factory(contextProvider, jsonPrinterProvider, apiClientProvider, httpClientProvider);
  }

  public static MeasurementsManager newInstance(Context context, JsonPrinter jsonPrinter,
      OONIAPIClient apiClient, OkHttpClient httpClient) {
    return new MeasurementsManager(context, jsonPrinter, apiClient, httpClient);
  }
}
