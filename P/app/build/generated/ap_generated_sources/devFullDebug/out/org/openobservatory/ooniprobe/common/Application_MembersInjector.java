// Generated by Dagger (https://dagger.dev).
package org.openobservatory.ooniprobe.common;

import com.google.gson.Gson;
import dagger.MembersInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.InjectedFieldSignature;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import org.openobservatory.ooniprobe.client.OONIAPIClient;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class Application_MembersInjector implements MembersInjector<Application> {
  private final Provider<PreferenceManager> _preferenceManagerProvider;

  private final Provider<Gson> _gsonProvider;

  private final Provider<OkHttpClient> _okHttpClientProvider;

  private final Provider<OONIAPIClient> _apiClientProvider;

  private final Provider<AppLogger> loggerProvider;

  public Application_MembersInjector(Provider<PreferenceManager> _preferenceManagerProvider,
      Provider<Gson> _gsonProvider, Provider<OkHttpClient> _okHttpClientProvider,
      Provider<OONIAPIClient> _apiClientProvider, Provider<AppLogger> loggerProvider) {
    this._preferenceManagerProvider = _preferenceManagerProvider;
    this._gsonProvider = _gsonProvider;
    this._okHttpClientProvider = _okHttpClientProvider;
    this._apiClientProvider = _apiClientProvider;
    this.loggerProvider = loggerProvider;
  }

  public static MembersInjector<Application> create(
      Provider<PreferenceManager> _preferenceManagerProvider, Provider<Gson> _gsonProvider,
      Provider<OkHttpClient> _okHttpClientProvider, Provider<OONIAPIClient> _apiClientProvider,
      Provider<AppLogger> loggerProvider) {
    return new Application_MembersInjector(_preferenceManagerProvider, _gsonProvider, _okHttpClientProvider, _apiClientProvider, loggerProvider);
  }

  @Override
  public void injectMembers(Application instance) {
    inject_preferenceManager(instance, _preferenceManagerProvider.get());
    inject_gson(instance, _gsonProvider.get());
    inject_okHttpClient(instance, _okHttpClientProvider.get());
    inject_apiClient(instance, _apiClientProvider.get());
    injectLogger(instance, loggerProvider.get());
  }

  @InjectedFieldSignature("org.openobservatory.ooniprobe.common.Application._preferenceManager")
  public static void inject_preferenceManager(Application instance,
      PreferenceManager _preferenceManager) {
    instance._preferenceManager = _preferenceManager;
  }

  @InjectedFieldSignature("org.openobservatory.ooniprobe.common.Application._gson")
  public static void inject_gson(Application instance, Gson _gson) {
    instance._gson = _gson;
  }

  @InjectedFieldSignature("org.openobservatory.ooniprobe.common.Application._okHttpClient")
  public static void inject_okHttpClient(Application instance, OkHttpClient _okHttpClient) {
    instance._okHttpClient = _okHttpClient;
  }

  @InjectedFieldSignature("org.openobservatory.ooniprobe.common.Application._apiClient")
  public static void inject_apiClient(Application instance, OONIAPIClient _apiClient) {
    instance._apiClient = _apiClient;
  }

  @InjectedFieldSignature("org.openobservatory.ooniprobe.common.Application.logger")
  public static void injectLogger(Application instance, AppLogger logger) {
    instance.logger = logger;
  }
}
