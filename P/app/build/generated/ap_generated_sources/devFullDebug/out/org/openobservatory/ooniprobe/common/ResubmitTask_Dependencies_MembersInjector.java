// Generated by Dagger (https://dagger.dev).
package org.openobservatory.ooniprobe.common;

import dagger.MembersInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.InjectedFieldSignature;
import javax.inject.Provider;
import org.openobservatory.ooniprobe.domain.GetResults;
import org.openobservatory.ooniprobe.domain.MeasurementsManager;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ResubmitTask_Dependencies_MembersInjector implements MembersInjector<ResubmitTask.Dependencies> {
  private final Provider<MeasurementsManager> measurementsManagerProvider;

  private final Provider<GetResults> getResultsProvider;

  public ResubmitTask_Dependencies_MembersInjector(
      Provider<MeasurementsManager> measurementsManagerProvider,
      Provider<GetResults> getResultsProvider) {
    this.measurementsManagerProvider = measurementsManagerProvider;
    this.getResultsProvider = getResultsProvider;
  }

  public static MembersInjector<ResubmitTask.Dependencies> create(
      Provider<MeasurementsManager> measurementsManagerProvider,
      Provider<GetResults> getResultsProvider) {
    return new ResubmitTask_Dependencies_MembersInjector(measurementsManagerProvider, getResultsProvider);
  }

  @Override
  public void injectMembers(ResubmitTask.Dependencies instance) {
    injectMeasurementsManager(instance, measurementsManagerProvider.get());
    injectGetResults(instance, getResultsProvider.get());
  }

  @InjectedFieldSignature("org.openobservatory.ooniprobe.common.ResubmitTask.Dependencies.measurementsManager")
  public static void injectMeasurementsManager(ResubmitTask.Dependencies instance,
      MeasurementsManager measurementsManager) {
    instance.measurementsManager = measurementsManager;
  }

  @InjectedFieldSignature("org.openobservatory.ooniprobe.common.ResubmitTask.Dependencies.getResults")
  public static void injectGetResults(ResubmitTask.Dependencies instance, GetResults getResults) {
    instance.getResults = getResults;
  }
}
