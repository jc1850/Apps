// Generated by Dagger (https://dagger.dev).
package org.openobservatory.ooniprobe.activity;

import dagger.MembersInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.InjectedFieldSignature;
import javax.inject.Provider;
import org.openobservatory.ooniprobe.common.AppLogger;
import org.openobservatory.ooniprobe.common.PreferenceManager;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ProxyActivity_MembersInjector implements MembersInjector<ProxyActivity> {
  private final Provider<AppLogger> loggerProvider;

  private final Provider<PreferenceManager> preferenceManagerProvider;

  public ProxyActivity_MembersInjector(Provider<AppLogger> loggerProvider,
      Provider<PreferenceManager> preferenceManagerProvider) {
    this.loggerProvider = loggerProvider;
    this.preferenceManagerProvider = preferenceManagerProvider;
  }

  public static MembersInjector<ProxyActivity> create(Provider<AppLogger> loggerProvider,
      Provider<PreferenceManager> preferenceManagerProvider) {
    return new ProxyActivity_MembersInjector(loggerProvider, preferenceManagerProvider);
  }

  @Override
  public void injectMembers(ProxyActivity instance) {
    injectLogger(instance, loggerProvider.get());
    injectPreferenceManager(instance, preferenceManagerProvider.get());
  }

  @InjectedFieldSignature("org.openobservatory.ooniprobe.activity.ProxyActivity.logger")
  public static void injectLogger(ProxyActivity instance, AppLogger logger) {
    instance.logger = logger;
  }

  @InjectedFieldSignature("org.openobservatory.ooniprobe.activity.ProxyActivity.preferenceManager")
  public static void injectPreferenceManager(ProxyActivity instance,
      PreferenceManager preferenceManager) {
    instance.preferenceManager = preferenceManager;
  }
}
