// Generated by Dagger (https://dagger.dev).
package org.openobservatory.ooniprobe.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import org.openobservatory.ooniprobe.client.OONIAPIClient;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ApplicationModule_ProvideApiClientFactory implements Factory<OONIAPIClient> {
  private final ApplicationModule module;

  private final Provider<OkHttpClient> clientProvider;

  private final Provider<String> urlProvider;

  public ApplicationModule_ProvideApiClientFactory(ApplicationModule module,
      Provider<OkHttpClient> clientProvider, Provider<String> urlProvider) {
    this.module = module;
    this.clientProvider = clientProvider;
    this.urlProvider = urlProvider;
  }

  @Override
  public OONIAPIClient get() {
    return provideApiClient(module, clientProvider.get(), urlProvider.get());
  }

  public static ApplicationModule_ProvideApiClientFactory create(ApplicationModule module,
      Provider<OkHttpClient> clientProvider, Provider<String> urlProvider) {
    return new ApplicationModule_ProvideApiClientFactory(module, clientProvider, urlProvider);
  }

  public static OONIAPIClient provideApiClient(ApplicationModule instance, OkHttpClient client,
      String url) {
    return Preconditions.checkNotNullFromProvides(instance.provideApiClient(client, url));
  }
}
