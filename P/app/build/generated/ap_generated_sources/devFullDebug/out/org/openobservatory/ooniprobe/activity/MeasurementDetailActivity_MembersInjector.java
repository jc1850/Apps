// Generated by Dagger (https://dagger.dev).
package org.openobservatory.ooniprobe.activity;

import dagger.MembersInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.InjectedFieldSignature;
import javax.inject.Provider;
import org.openobservatory.ooniprobe.common.PreferenceManager;
import org.openobservatory.ooniprobe.domain.GetTestSuite;
import org.openobservatory.ooniprobe.domain.MeasurementsManager;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MeasurementDetailActivity_MembersInjector implements MembersInjector<MeasurementDetailActivity> {
  private final Provider<MeasurementsManager> measurementsManagerProvider;

  private final Provider<PreferenceManager> pmProvider;

  private final Provider<GetTestSuite> getTestSuiteProvider;

  private final Provider<PreferenceManager> preferenceManagerProvider;

  public MeasurementDetailActivity_MembersInjector(
      Provider<MeasurementsManager> measurementsManagerProvider,
      Provider<PreferenceManager> pmProvider, Provider<GetTestSuite> getTestSuiteProvider,
      Provider<PreferenceManager> preferenceManagerProvider) {
    this.measurementsManagerProvider = measurementsManagerProvider;
    this.pmProvider = pmProvider;
    this.getTestSuiteProvider = getTestSuiteProvider;
    this.preferenceManagerProvider = preferenceManagerProvider;
  }

  public static MembersInjector<MeasurementDetailActivity> create(
      Provider<MeasurementsManager> measurementsManagerProvider,
      Provider<PreferenceManager> pmProvider, Provider<GetTestSuite> getTestSuiteProvider,
      Provider<PreferenceManager> preferenceManagerProvider) {
    return new MeasurementDetailActivity_MembersInjector(measurementsManagerProvider, pmProvider, getTestSuiteProvider, preferenceManagerProvider);
  }

  @Override
  public void injectMembers(MeasurementDetailActivity instance) {
    injectMeasurementsManager(instance, measurementsManagerProvider.get());
    injectPm(instance, pmProvider.get());
    injectGetTestSuite(instance, getTestSuiteProvider.get());
    injectPreferenceManager(instance, preferenceManagerProvider.get());
  }

  @InjectedFieldSignature("org.openobservatory.ooniprobe.activity.MeasurementDetailActivity.measurementsManager")
  public static void injectMeasurementsManager(MeasurementDetailActivity instance,
      MeasurementsManager measurementsManager) {
    instance.measurementsManager = measurementsManager;
  }

  @InjectedFieldSignature("org.openobservatory.ooniprobe.activity.MeasurementDetailActivity.pm")
  public static void injectPm(MeasurementDetailActivity instance, PreferenceManager pm) {
    instance.pm = pm;
  }

  @InjectedFieldSignature("org.openobservatory.ooniprobe.activity.MeasurementDetailActivity.getTestSuite")
  public static void injectGetTestSuite(MeasurementDetailActivity instance,
      GetTestSuite getTestSuite) {
    instance.getTestSuite = getTestSuite;
  }

  @InjectedFieldSignature("org.openobservatory.ooniprobe.activity.MeasurementDetailActivity.preferenceManager")
  public static void injectPreferenceManager(MeasurementDetailActivity instance,
      PreferenceManager preferenceManager) {
    instance.preferenceManager = preferenceManager;
  }
}
