// Generated by Dagger (https://dagger.dev).
package org.openobservatory.ooniprobe.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.Interceptor;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ApplicationModule_ProvideOkHttpClientFactory implements Factory<OkHttpClient> {
  private final ApplicationModule module;

  private final Provider<HttpLoggingInterceptor> loggingProvider;

  private final Provider<Interceptor> headerInterceptorProvider;

  public ApplicationModule_ProvideOkHttpClientFactory(ApplicationModule module,
      Provider<HttpLoggingInterceptor> loggingProvider,
      Provider<Interceptor> headerInterceptorProvider) {
    this.module = module;
    this.loggingProvider = loggingProvider;
    this.headerInterceptorProvider = headerInterceptorProvider;
  }

  @Override
  public OkHttpClient get() {
    return provideOkHttpClient(module, loggingProvider.get(), headerInterceptorProvider.get());
  }

  public static ApplicationModule_ProvideOkHttpClientFactory create(ApplicationModule module,
      Provider<HttpLoggingInterceptor> loggingProvider,
      Provider<Interceptor> headerInterceptorProvider) {
    return new ApplicationModule_ProvideOkHttpClientFactory(module, loggingProvider, headerInterceptorProvider);
  }

  public static OkHttpClient provideOkHttpClient(ApplicationModule instance,
      HttpLoggingInterceptor logging, Interceptor headerInterceptor) {
    return Preconditions.checkNotNullFromProvides(instance.provideOkHttpClient(logging, headerInterceptor));
  }
}
