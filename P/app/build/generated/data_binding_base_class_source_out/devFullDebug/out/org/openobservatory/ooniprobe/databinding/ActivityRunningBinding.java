// Generated by view binder compiler. Do not edit!
package org.openobservatory.ooniprobe.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.airbnb.lottie.LottieAnimationView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.openobservatory.ooniprobe.R;

public final class ActivityRunningBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView DashboardRunningEstimatedTimeLeft;

  @NonNull
  public final LottieAnimationView animation;

  @NonNull
  public final ImageButton close;

  @NonNull
  public final TextView eta;

  @NonNull
  public final TextView log;

  @NonNull
  public final TextView name;

  @NonNull
  public final ProgressBar progress;

  @NonNull
  public final RelativeLayout proxyIcon;

  @NonNull
  public final TextView running;

  @NonNull
  public final Button stop;

  private ActivityRunningBinding(@NonNull LinearLayout rootView,
      @NonNull TextView DashboardRunningEstimatedTimeLeft, @NonNull LottieAnimationView animation,
      @NonNull ImageButton close, @NonNull TextView eta, @NonNull TextView log,
      @NonNull TextView name, @NonNull ProgressBar progress, @NonNull RelativeLayout proxyIcon,
      @NonNull TextView running, @NonNull Button stop) {
    this.rootView = rootView;
    this.DashboardRunningEstimatedTimeLeft = DashboardRunningEstimatedTimeLeft;
    this.animation = animation;
    this.close = close;
    this.eta = eta;
    this.log = log;
    this.name = name;
    this.progress = progress;
    this.proxyIcon = proxyIcon;
    this.running = running;
    this.stop = stop;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityRunningBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityRunningBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_running, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityRunningBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.Dashboard_Running_EstimatedTimeLeft;
      TextView DashboardRunningEstimatedTimeLeft = ViewBindings.findChildViewById(rootView, id);
      if (DashboardRunningEstimatedTimeLeft == null) {
        break missingId;
      }

      id = R.id.animation;
      LottieAnimationView animation = ViewBindings.findChildViewById(rootView, id);
      if (animation == null) {
        break missingId;
      }

      id = R.id.close;
      ImageButton close = ViewBindings.findChildViewById(rootView, id);
      if (close == null) {
        break missingId;
      }

      id = R.id.eta;
      TextView eta = ViewBindings.findChildViewById(rootView, id);
      if (eta == null) {
        break missingId;
      }

      id = R.id.log;
      TextView log = ViewBindings.findChildViewById(rootView, id);
      if (log == null) {
        break missingId;
      }

      id = R.id.name;
      TextView name = ViewBindings.findChildViewById(rootView, id);
      if (name == null) {
        break missingId;
      }

      id = R.id.progress;
      ProgressBar progress = ViewBindings.findChildViewById(rootView, id);
      if (progress == null) {
        break missingId;
      }

      id = R.id.proxy_icon;
      RelativeLayout proxyIcon = ViewBindings.findChildViewById(rootView, id);
      if (proxyIcon == null) {
        break missingId;
      }

      id = R.id.running;
      TextView running = ViewBindings.findChildViewById(rootView, id);
      if (running == null) {
        break missingId;
      }

      id = R.id.stop;
      Button stop = ViewBindings.findChildViewById(rootView, id);
      if (stop == null) {
        break missingId;
      }

      return new ActivityRunningBinding((LinearLayout) rootView, DashboardRunningEstimatedTimeLeft,
          animation, close, eta, log, name, progress, proxyIcon, running, stop);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
