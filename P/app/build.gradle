apply plugin: 'com.android.application'
apply from: 'jacoco.gradle'

android {
    compileSdk 33
    ndkVersion '22.0.7026061'

	defaultConfig {
		applicationId 'org.openobservatory.ooniprobe'
        minSdk 21
        targetSdk 33
        versionName '3.8.1'
        versionCode 99
		testInstrumentationRunner "org.openobservatory.ooniprobe.TestAndroidJUnitRunner"
		buildConfigField 'String', 'OONI_API_BASE_URL', '"https://api.ooni.io/"'
		buildConfigField 'String', 'NOTIFICATION_SERVER', '"https://countly.ooni.io"'
		resValue "string", "APP_NAME", "OONI Probe"
		buildConfigField 'String', 'SOFTWARE_NAME', 'BASE_SOFTWARE_NAME+IS_DEBUG'
		buildConfigField 'String', 'COUNTLY_KEY', '"146836f41172f9e3287cab6f2cc347de3f5ddf3b"'
		buildConfigField "boolean", "RUN_AUTOMATION", "false"
	}

    buildTypes {
        debug {
            testCoverageEnabled true
            buildConfigField 'String', 'IS_DEBUG', '"-debug"'
            buildConfigField 'String', 'COUNTLY_KEY', '"e6c2cfe53e85951d50567467cef3f9fa2eab32c3"'
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField 'String', 'IS_DEBUG', '""'
        }
    }

    testOptions {
        animationsDisabled = true
        unitTests {
            includeAndroidResources = true
                    all {
                        // All the usual Gradle options.
                        testLogging {
                            events "skipped", "failed", "standardOut", "standardError"
                            showStandardStreams = true
                        }
                    }

        }
    }

    // Shared test code between Unit and Instrumented tests
    sourceSets {
        androidTest {
            java.srcDirs += "src/sharedTest/java"
            resources.srcDirs += "src/sharedTest/resources"
        }
        test {
            java.srcDirs += "src/sharedTest/java"
            resources.srcDirs += "src/sharedTest/resources"
        }
    }

    flavorDimensions 'testing', 'license'
    productFlavors {
        stable {
            dimension 'testing'
            buildConfigField 'String', 'BASE_SOFTWARE_NAME', '"ooniprobe-android"'
        }
        dev {
            dimension 'testing'
            applicationIdSuffix '.dev'
            versionName versionNameDate()
            versionCode versionCodeDate()
            buildConfigField 'String', 'BASE_SOFTWARE_NAME', '"ooniprobe-android-dev"'
            resValue "string", "APP_NAME", "OONI Dev"
            buildConfigField 'String', 'COUNTLY_KEY', '"e6c2cfe53e85951d50567467cef3f9fa2eab32c3"'
        }
        experimental {
            dimension 'testing'
            applicationIdSuffix '.experimental'
            versionName versionNameDate()
            versionCode versionCodeDate()
            buildConfigField 'String', 'BASE_SOFTWARE_NAME', '"ooniprobe-android-experimental"'
            resValue "string", "APP_NAME", "OONI Exp"
            buildConfigField 'String', 'COUNTLY_KEY', '"e6c2cfe53e85951d50567467cef3f9fa2eab32c3"'
        }
        fdroid {
            dimension 'license'
        }
        full {
            dimension 'license'
        }
    }
    variantFilter { variant ->
        def names = variant.flavors*.name
        if (names.contains("fdroid") && (names.contains("experimental") || names.contains("dev"))) {
            setIgnore(true)
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildFeatures {
        viewBinding = true
    }
    namespace 'org.openobservatory.ooniprobe'
}

dependencies {
    implementation project(path: ':engine')

// AndroidX
	implementation 'androidx.appcompat:appcompat:1.4.2'
	implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
	implementation 'androidx.lifecycle:lifecycle-process:2.5.1'
	implementation 'androidx.preference:preference:1.2.0'
	implementation 'com.google.android.material:material:1.6.1'
	implementation 'androidx.localbroadcastmanager:localbroadcastmanager:1.1.0'
	implementation 'com.google.guava:guava:30.1.1-android'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

// Third-party
	annotationProcessor 'com.github.Raizlabs.DBFlow:dbflow-processor:4.2.4'
	implementation 'com.github.Raizlabs.DBFlow:dbflow-core:4.2.4'
	implementation 'com.github.Raizlabs.DBFlow:dbflow:4.2.4'

	implementation 'com.squareup.retrofit2:retrofit:2.9.0'
	implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
	implementation 'com.squareup.okhttp3:logging-interceptor:4.9.1'


	implementation 'com.jakewharton:butterknife:10.2.3'
	annotationProcessor 'com.jakewharton:butterknife-compiler:10.2.3'

	implementation 'com.github.xanscale.LocalhostToolkit:app:19.05.01'
	implementation 'com.airbnb.android:lottie:3.0.7'
	implementation 'com.google.code.gson:gson:2.8.9'
	implementation 'ru.noties:markwon:2.0.1'
	implementation 'commons-io:commons-io:2.6'
	//arcview to fragment_dashboard
	implementation 'com.github.florent37:shapeofview:1.3.2'

// Flavor
	fullImplementation platform('com.google.firebase:firebase-bom:26.3.0')
	fullImplementation 'com.google.firebase:firebase-messaging'
	fullImplementation 'ly.count.android:sdk:21.11.0'
	fullImplementation 'io.sentry:sentry-android:6.3.0'
	fullImplementation 'com.google.android.play:core:1.10.3'

// Dependency Injection
    implementation 'com.google.dagger:dagger:2.36'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.36'

// Logger
    implementation project(':applogger')

// Testing
	// Unit Testing
	testImplementation 'junit:junit:4.13.2'
	testImplementation 'androidx.test:core:1.4.0'
	testImplementation 'androidx.test:runner:1.4.0'
	testImplementation 'androidx.test:rules:1.4.0'
	testImplementation 'org.mockito:mockito-core:4.6.1'
	testImplementation 'org.mockito:mockito-inline:4.6.1'
	testImplementation 'org.robolectric:robolectric:4.5.1'
	testImplementation 'com.github.blocoio:faker:1.2.8'
	testImplementation 'org.ooni:oonimkall:2023.03.16-173249'
	testAnnotationProcessor 'com.google.dagger:dagger-compiler:2.36'

	// Instrumentation Testing
	androidTestImplementation 'tools.fastlane:screengrab:2.0.0'
	androidTestImplementation 'com.github.blocoio:faker:1.2.8'
	androidTestImplementation 'androidx.test:runner:1.4.0'
	androidTestImplementation 'androidx.test:rules:1.4.0'
	androidTestImplementation 'androidx.test.ext:junit:1.1.3'
	androidTestImplementation 'androidx.test.espresso:espresso-intents:3.4.0'
	androidTestImplementation('androidx.test.espresso:espresso-contrib:3.4.0') {
		exclude group: 'com.android.support', module: 'appcompat'
		exclude group: 'com.android.support', module: 'support-v4'
		exclude module: 'recyclerview-v7'
	}
	androidTestImplementation('androidx.test.espresso:espresso-core:3.4.0') {
		exclude group: 'com.android.support', module: 'appcompat'
		exclude group: 'com.android.support', module: 'support-v4'
		exclude module: 'recyclerview-v7'
	}
	androidTestImplementation('com.schibsted.spain:barista:3.9.0')
	androidTestAnnotationProcessor "com.google.dagger:dagger-compiler:2.36"
}

static def versionCodeDate() {
    return new Date().format("yyyyMMdd").toInteger()
}

static def versionNameDate() {
    return new Date().format("yyyy.MM.dd-HH")
}

if (!getGradle().getStartParameter().getTaskRequests()
  .toString().contains("Fdroid")){
    apply plugin: 'com.google.gms.google-services'
}
task classpath(type: Jar) {
    from android.sourceSets.main.java.srcDirs,
            android.sourceSets.test.java.srcDirs
    outputs.upToDateWhen { false }
    doLast {
        println "Building classpath..."
        def cp2 = [android.getBootClasspath()[0], it.archivePath]
        android.applicationVariants.all { v ->
            v.getCompileClasspath(null).getFiles().each{
                File f->
                    cp2 += f.getAbsolutePath()//this is the one of classpath
            }
        }
        def classpath = cp2.unique().join(":")
        println classpath
    }
}
