// Code generated by dagger-compiler.  Do not edit.
package io.github.hidroh.materialistic.data;

import android.content.Context;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.lang.Override;
import java.lang.SuppressWarnings;
import java.util.Set;

/**
 * A {@code Binding<io.github.hidroh.materialistic.data.SyncDelegate>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code io.github.hidroh.materialistic.data.SyncDelegate} and its
 * dependencies.
 *
 * Being a {@code Provider<io.github.hidroh.materialistic.data.SyncDelegate>} and handling creation and
 * preparation of object instances.
 */
public final class SyncDelegate$$InjectAdapter extends Binding<SyncDelegate> {
  private Binding<Context> context;

  private Binding<RestServiceFactory> factory;

  private Binding<ReadabilityClient> readabilityClient;

  public SyncDelegate$$InjectAdapter() {
    super("io.github.hidroh.materialistic.data.SyncDelegate", "members/io.github.hidroh.materialistic.data.SyncDelegate", NOT_SINGLETON, SyncDelegate.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    context = (Binding<Context>) linker.requestBinding("android.content.Context", SyncDelegate.class, getClass().getClassLoader());
    factory = (Binding<RestServiceFactory>) linker.requestBinding("io.github.hidroh.materialistic.data.RestServiceFactory", SyncDelegate.class, getClass().getClassLoader());
    readabilityClient = (Binding<ReadabilityClient>) linker.requestBinding("io.github.hidroh.materialistic.data.ReadabilityClient", SyncDelegate.class, getClass().getClassLoader());
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    getBindings.add(context);
    getBindings.add(factory);
    getBindings.add(readabilityClient);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<SyncDelegate>}.
   */
  @Override
  public SyncDelegate get() {
    SyncDelegate result = new SyncDelegate(context.get(), factory.get(), readabilityClient.get());
    return result;
  }
}
