// Code generated by dagger-compiler.  Do not edit.
package io.github.hidroh.materialistic.data;

import dagger.internal.Binding;
import dagger.internal.Linker;
import java.lang.Override;
import java.lang.SuppressWarnings;
import java.util.Set;
import okhttp3.Call;

/**
 * A {@code Binding<io.github.hidroh.materialistic.data.RestServiceFactory.Impl>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code io.github.hidroh.materialistic.data.RestServiceFactory.Impl} and its
 * dependencies.
 *
 * Being a {@code Provider<io.github.hidroh.materialistic.data.RestServiceFactory.Impl>} and handling creation and
 * preparation of object instances.
 */
public final class RestServiceFactory$Impl$$InjectAdapter extends Binding<RestServiceFactory.Impl> {
  private Binding<Call.Factory> callFactory;

  public RestServiceFactory$Impl$$InjectAdapter() {
    super("io.github.hidroh.materialistic.data.RestServiceFactory$Impl", "members/io.github.hidroh.materialistic.data.RestServiceFactory$Impl", NOT_SINGLETON, RestServiceFactory.Impl.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    callFactory = (Binding<Call.Factory>) linker.requestBinding("okhttp3.Call$Factory", RestServiceFactory.Impl.class, getClass().getClassLoader());
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    getBindings.add(callFactory);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<RestServiceFactory.Impl>}.
   */
  @Override
  public RestServiceFactory.Impl get() {
    RestServiceFactory.Impl result = new RestServiceFactory.Impl(callFactory.get());
    return result;
  }
}
