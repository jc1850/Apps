// Code generated by dagger-compiler.  Do not edit.
package io.github.hidroh.materialistic;

import android.content.Context;
import androidx.sqlite.db.SupportSQLiteOpenHelper;
import dagger.internal.Binding;
import dagger.internal.BindingsGroup;
import dagger.internal.Linker;
import dagger.internal.ModuleAdapter;
import dagger.internal.ProvidesBinding;
import io.github.hidroh.materialistic.accounts.UserServices;
import io.github.hidroh.materialistic.data.AlgoliaClient;
import io.github.hidroh.materialistic.data.AlgoliaPopularClient;
import io.github.hidroh.materialistic.data.FeedbackClient;
import io.github.hidroh.materialistic.data.HackerNewsClient;
import io.github.hidroh.materialistic.data.ItemManager;
import io.github.hidroh.materialistic.data.LocalCache;
import io.github.hidroh.materialistic.data.MaterialisticDatabase;
import io.github.hidroh.materialistic.data.ReadabilityClient;
import io.github.hidroh.materialistic.data.SyncScheduler;
import io.github.hidroh.materialistic.data.UserManager;
import io.github.hidroh.materialistic.data.android.Cache;
import java.lang.Class;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Set;
import okhttp3.Call;
import rx.Scheduler;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @dagger.Provides} methods.
 */
public final class DataModule$$ModuleAdapter extends ModuleAdapter<DataModule> {
  private static final String[] INJECTS = { };

  private static final Class<?>[] STATIC_INJECTIONS = { };

  private static final Class<?>[] INCLUDES = { NetworkModule.class, };

  public DataModule$$ModuleAdapter() {
    super(DataModule.class, INJECTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, false /*complete*/, true /*library*/);
  }

  @Override
  public DataModule newModule() {
    return new DataModule();
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(BindingsGroup bindings, DataModule module) {
    bindings.contributeProvidesBinding("@javax.inject.Named(value=hn)/io.github.hidroh.materialistic.data.ItemManager", new ProvideHackerNewsClientProvidesAdapter(module));
    bindings.contributeProvidesBinding("@javax.inject.Named(value=algolia)/io.github.hidroh.materialistic.data.ItemManager", new ProvideAlgoliaClientProvidesAdapter(module));
    bindings.contributeProvidesBinding("@javax.inject.Named(value=popular)/io.github.hidroh.materialistic.data.ItemManager", new ProvideAlgoliaPopularClientProvidesAdapter(module));
    bindings.contributeProvidesBinding("io.github.hidroh.materialistic.data.UserManager", new ProvideUserManagerProvidesAdapter(module));
    bindings.contributeProvidesBinding("io.github.hidroh.materialistic.data.FeedbackClient", new ProvideFeedbackClientProvidesAdapter(module));
    bindings.contributeProvidesBinding("io.github.hidroh.materialistic.data.ReadabilityClient", new ProvideReadabilityClientProvidesAdapter(module));
    bindings.contributeProvidesBinding("io.github.hidroh.materialistic.accounts.UserServices", new ProvideUserServicesProvidesAdapter(module));
    bindings.contributeProvidesBinding("@javax.inject.Named(value=io)/rx.Scheduler", new ProvideIoSchedulerProvidesAdapter(module));
    bindings.contributeProvidesBinding("@javax.inject.Named(value=main)/rx.Scheduler", new ProvideMainThreadSchedulerProvidesAdapter(module));
    bindings.contributeProvidesBinding("io.github.hidroh.materialistic.data.SyncScheduler", new ProvideSyncSchedulerProvidesAdapter(module));
    bindings.contributeProvidesBinding("io.github.hidroh.materialistic.data.LocalCache", new ProvideLocalCacheProvidesAdapter(module));
    bindings.contributeProvidesBinding("io.github.hidroh.materialistic.data.MaterialisticDatabase", new ProvideDatabaseProvidesAdapter(module));
    bindings.contributeProvidesBinding("io.github.hidroh.materialistic.data.MaterialisticDatabase$SavedStoriesDao", new ProvideSavedStoriesDaoProvidesAdapter(module));
    bindings.contributeProvidesBinding("io.github.hidroh.materialistic.data.MaterialisticDatabase$ReadStoriesDao", new ProvideReadStoriesDaoProvidesAdapter(module));
    bindings.contributeProvidesBinding("io.github.hidroh.materialistic.data.MaterialisticDatabase$ReadableDao", new ProvideReadableDaoProvidesAdapter(module));
    bindings.contributeProvidesBinding("androidx.sqlite.db.SupportSQLiteOpenHelper", new ProvideOpenHelperProvidesAdapter(module));
  }

  /**
   * A {@code Binding<ItemManager>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code ItemManager} and its
   * dependencies.
   *
   * Being a {@code Provider<ItemManager>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideHackerNewsClientProvidesAdapter extends ProvidesBinding<ItemManager> {
    private final DataModule module;

    private Binding<HackerNewsClient> client;

    public ProvideHackerNewsClientProvidesAdapter(DataModule module) {
      super("@javax.inject.Named(value=hn)/io.github.hidroh.materialistic.data.ItemManager", IS_SINGLETON, "io.github.hidroh.materialistic.DataModule", "provideHackerNewsClient");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      client = (Binding<HackerNewsClient>) linker.requestBinding("io.github.hidroh.materialistic.data.HackerNewsClient", DataModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings,
        Set<Binding<?>> injectMembersBindings) {
      getBindings.add(client);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<ItemManager>}.
     */
    @Override
    public ItemManager get() {
      return module.provideHackerNewsClient(client.get());
    }
  }

  /**
   * A {@code Binding<ItemManager>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code ItemManager} and its
   * dependencies.
   *
   * Being a {@code Provider<ItemManager>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideAlgoliaClientProvidesAdapter extends ProvidesBinding<ItemManager> {
    private final DataModule module;

    private Binding<AlgoliaClient> client;

    public ProvideAlgoliaClientProvidesAdapter(DataModule module) {
      super("@javax.inject.Named(value=algolia)/io.github.hidroh.materialistic.data.ItemManager", IS_SINGLETON, "io.github.hidroh.materialistic.DataModule", "provideAlgoliaClient");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      client = (Binding<AlgoliaClient>) linker.requestBinding("io.github.hidroh.materialistic.data.AlgoliaClient", DataModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings,
        Set<Binding<?>> injectMembersBindings) {
      getBindings.add(client);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<ItemManager>}.
     */
    @Override
    public ItemManager get() {
      return module.provideAlgoliaClient(client.get());
    }
  }

  /**
   * A {@code Binding<ItemManager>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code ItemManager} and its
   * dependencies.
   *
   * Being a {@code Provider<ItemManager>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideAlgoliaPopularClientProvidesAdapter extends ProvidesBinding<ItemManager> {
    private final DataModule module;

    private Binding<AlgoliaPopularClient> client;

    public ProvideAlgoliaPopularClientProvidesAdapter(DataModule module) {
      super("@javax.inject.Named(value=popular)/io.github.hidroh.materialistic.data.ItemManager", IS_SINGLETON, "io.github.hidroh.materialistic.DataModule", "provideAlgoliaPopularClient");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      client = (Binding<AlgoliaPopularClient>) linker.requestBinding("io.github.hidroh.materialistic.data.AlgoliaPopularClient", DataModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings,
        Set<Binding<?>> injectMembersBindings) {
      getBindings.add(client);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<ItemManager>}.
     */
    @Override
    public ItemManager get() {
      return module.provideAlgoliaPopularClient(client.get());
    }
  }

  /**
   * A {@code Binding<UserManager>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code UserManager} and its
   * dependencies.
   *
   * Being a {@code Provider<UserManager>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideUserManagerProvidesAdapter extends ProvidesBinding<UserManager> {
    private final DataModule module;

    private Binding<HackerNewsClient> client;

    public ProvideUserManagerProvidesAdapter(DataModule module) {
      super("io.github.hidroh.materialistic.data.UserManager", IS_SINGLETON, "io.github.hidroh.materialistic.DataModule", "provideUserManager");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      client = (Binding<HackerNewsClient>) linker.requestBinding("io.github.hidroh.materialistic.data.HackerNewsClient", DataModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings,
        Set<Binding<?>> injectMembersBindings) {
      getBindings.add(client);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<UserManager>}.
     */
    @Override
    public UserManager get() {
      return module.provideUserManager(client.get());
    }
  }

  /**
   * A {@code Binding<FeedbackClient>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code FeedbackClient} and its
   * dependencies.
   *
   * Being a {@code Provider<FeedbackClient>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideFeedbackClientProvidesAdapter extends ProvidesBinding<FeedbackClient> {
    private final DataModule module;

    private Binding<FeedbackClient.Impl> client;

    public ProvideFeedbackClientProvidesAdapter(DataModule module) {
      super("io.github.hidroh.materialistic.data.FeedbackClient", IS_SINGLETON, "io.github.hidroh.materialistic.DataModule", "provideFeedbackClient");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      client = (Binding<FeedbackClient.Impl>) linker.requestBinding("io.github.hidroh.materialistic.data.FeedbackClient$Impl", DataModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings,
        Set<Binding<?>> injectMembersBindings) {
      getBindings.add(client);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<FeedbackClient>}.
     */
    @Override
    public FeedbackClient get() {
      return module.provideFeedbackClient(client.get());
    }
  }

  /**
   * A {@code Binding<ReadabilityClient>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code ReadabilityClient} and its
   * dependencies.
   *
   * Being a {@code Provider<ReadabilityClient>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideReadabilityClientProvidesAdapter extends ProvidesBinding<ReadabilityClient> {
    private final DataModule module;

    private Binding<ReadabilityClient.Impl> client;

    public ProvideReadabilityClientProvidesAdapter(DataModule module) {
      super("io.github.hidroh.materialistic.data.ReadabilityClient", IS_SINGLETON, "io.github.hidroh.materialistic.DataModule", "provideReadabilityClient");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      client = (Binding<ReadabilityClient.Impl>) linker.requestBinding("io.github.hidroh.materialistic.data.ReadabilityClient$Impl", DataModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings,
        Set<Binding<?>> injectMembersBindings) {
      getBindings.add(client);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<ReadabilityClient>}.
     */
    @Override
    public ReadabilityClient get() {
      return module.provideReadabilityClient(client.get());
    }
  }

  /**
   * A {@code Binding<UserServices>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code UserServices} and its
   * dependencies.
   *
   * Being a {@code Provider<UserServices>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideUserServicesProvidesAdapter extends ProvidesBinding<UserServices> {
    private final DataModule module;

    private Binding<Call.Factory> callFactory;

    private Binding<Scheduler> ioScheduler;

    public ProvideUserServicesProvidesAdapter(DataModule module) {
      super("io.github.hidroh.materialistic.accounts.UserServices", IS_SINGLETON, "io.github.hidroh.materialistic.DataModule", "provideUserServices");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      callFactory = (Binding<Call.Factory>) linker.requestBinding("okhttp3.Call$Factory", DataModule.class, getClass().getClassLoader());
      ioScheduler = (Binding<Scheduler>) linker.requestBinding("@javax.inject.Named(value=io)/rx.Scheduler", DataModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings,
        Set<Binding<?>> injectMembersBindings) {
      getBindings.add(callFactory);
      getBindings.add(ioScheduler);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<UserServices>}.
     */
    @Override
    public UserServices get() {
      return module.provideUserServices(callFactory.get(), ioScheduler.get());
    }
  }

  /**
   * A {@code Binding<Scheduler>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<Scheduler>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideIoSchedulerProvidesAdapter extends ProvidesBinding<Scheduler> {
    private final DataModule module;

    public ProvideIoSchedulerProvidesAdapter(DataModule module) {
      super("@javax.inject.Named(value=io)/rx.Scheduler", IS_SINGLETON, "io.github.hidroh.materialistic.DataModule", "provideIoScheduler");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<Scheduler>}.
     */
    @Override
    public Scheduler get() {
      return module.provideIoScheduler();
    }
  }

  /**
   * A {@code Binding<Scheduler>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<Scheduler>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideMainThreadSchedulerProvidesAdapter extends ProvidesBinding<Scheduler> {
    private final DataModule module;

    public ProvideMainThreadSchedulerProvidesAdapter(DataModule module) {
      super("@javax.inject.Named(value=main)/rx.Scheduler", IS_SINGLETON, "io.github.hidroh.materialistic.DataModule", "provideMainThreadScheduler");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<Scheduler>}.
     */
    @Override
    public Scheduler get() {
      return module.provideMainThreadScheduler();
    }
  }

  /**
   * A {@code Binding<SyncScheduler>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<SyncScheduler>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideSyncSchedulerProvidesAdapter extends ProvidesBinding<SyncScheduler> {
    private final DataModule module;

    public ProvideSyncSchedulerProvidesAdapter(DataModule module) {
      super("io.github.hidroh.materialistic.data.SyncScheduler", IS_SINGLETON, "io.github.hidroh.materialistic.DataModule", "provideSyncScheduler");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<SyncScheduler>}.
     */
    @Override
    public SyncScheduler get() {
      return module.provideSyncScheduler();
    }
  }

  /**
   * A {@code Binding<LocalCache>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code LocalCache} and its
   * dependencies.
   *
   * Being a {@code Provider<LocalCache>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideLocalCacheProvidesAdapter extends ProvidesBinding<LocalCache> {
    private final DataModule module;

    private Binding<Cache> cache;

    public ProvideLocalCacheProvidesAdapter(DataModule module) {
      super("io.github.hidroh.materialistic.data.LocalCache", IS_SINGLETON, "io.github.hidroh.materialistic.DataModule", "provideLocalCache");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      cache = (Binding<Cache>) linker.requestBinding("io.github.hidroh.materialistic.data.android.Cache", DataModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings,
        Set<Binding<?>> injectMembersBindings) {
      getBindings.add(cache);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<LocalCache>}.
     */
    @Override
    public LocalCache get() {
      return module.provideLocalCache(cache.get());
    }
  }

  /**
   * A {@code Binding<MaterialisticDatabase>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code MaterialisticDatabase} and its
   * dependencies.
   *
   * Being a {@code Provider<MaterialisticDatabase>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideDatabaseProvidesAdapter extends ProvidesBinding<MaterialisticDatabase> {
    private final DataModule module;

    private Binding<Context> context;

    public ProvideDatabaseProvidesAdapter(DataModule module) {
      super("io.github.hidroh.materialistic.data.MaterialisticDatabase", IS_SINGLETON, "io.github.hidroh.materialistic.DataModule", "provideDatabase");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      context = (Binding<Context>) linker.requestBinding("android.content.Context", DataModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings,
        Set<Binding<?>> injectMembersBindings) {
      getBindings.add(context);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<MaterialisticDatabase>}.
     */
    @Override
    public MaterialisticDatabase get() {
      return module.provideDatabase(context.get());
    }
  }

  /**
   * A {@code Binding<MaterialisticDatabase.SavedStoriesDao>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code MaterialisticDatabase.SavedStoriesDao} and its
   * dependencies.
   *
   * Being a {@code Provider<MaterialisticDatabase.SavedStoriesDao>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideSavedStoriesDaoProvidesAdapter extends ProvidesBinding<MaterialisticDatabase.SavedStoriesDao> {
    private final DataModule module;

    private Binding<MaterialisticDatabase> database;

    public ProvideSavedStoriesDaoProvidesAdapter(DataModule module) {
      super("io.github.hidroh.materialistic.data.MaterialisticDatabase$SavedStoriesDao", NOT_SINGLETON, "io.github.hidroh.materialistic.DataModule", "provideSavedStoriesDao");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      database = (Binding<MaterialisticDatabase>) linker.requestBinding("io.github.hidroh.materialistic.data.MaterialisticDatabase", DataModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings,
        Set<Binding<?>> injectMembersBindings) {
      getBindings.add(database);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<MaterialisticDatabase.SavedStoriesDao>}.
     */
    @Override
    public MaterialisticDatabase.SavedStoriesDao get() {
      return module.provideSavedStoriesDao(database.get());
    }
  }

  /**
   * A {@code Binding<MaterialisticDatabase.ReadStoriesDao>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code MaterialisticDatabase.ReadStoriesDao} and its
   * dependencies.
   *
   * Being a {@code Provider<MaterialisticDatabase.ReadStoriesDao>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideReadStoriesDaoProvidesAdapter extends ProvidesBinding<MaterialisticDatabase.ReadStoriesDao> {
    private final DataModule module;

    private Binding<MaterialisticDatabase> database;

    public ProvideReadStoriesDaoProvidesAdapter(DataModule module) {
      super("io.github.hidroh.materialistic.data.MaterialisticDatabase$ReadStoriesDao", NOT_SINGLETON, "io.github.hidroh.materialistic.DataModule", "provideReadStoriesDao");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      database = (Binding<MaterialisticDatabase>) linker.requestBinding("io.github.hidroh.materialistic.data.MaterialisticDatabase", DataModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings,
        Set<Binding<?>> injectMembersBindings) {
      getBindings.add(database);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<MaterialisticDatabase.ReadStoriesDao>}.
     */
    @Override
    public MaterialisticDatabase.ReadStoriesDao get() {
      return module.provideReadStoriesDao(database.get());
    }
  }

  /**
   * A {@code Binding<MaterialisticDatabase.ReadableDao>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code MaterialisticDatabase.ReadableDao} and its
   * dependencies.
   *
   * Being a {@code Provider<MaterialisticDatabase.ReadableDao>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideReadableDaoProvidesAdapter extends ProvidesBinding<MaterialisticDatabase.ReadableDao> {
    private final DataModule module;

    private Binding<MaterialisticDatabase> database;

    public ProvideReadableDaoProvidesAdapter(DataModule module) {
      super("io.github.hidroh.materialistic.data.MaterialisticDatabase$ReadableDao", NOT_SINGLETON, "io.github.hidroh.materialistic.DataModule", "provideReadableDao");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      database = (Binding<MaterialisticDatabase>) linker.requestBinding("io.github.hidroh.materialistic.data.MaterialisticDatabase", DataModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings,
        Set<Binding<?>> injectMembersBindings) {
      getBindings.add(database);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<MaterialisticDatabase.ReadableDao>}.
     */
    @Override
    public MaterialisticDatabase.ReadableDao get() {
      return module.provideReadableDao(database.get());
    }
  }

  /**
   * A {@code Binding<SupportSQLiteOpenHelper>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code SupportSQLiteOpenHelper} and its
   * dependencies.
   *
   * Being a {@code Provider<SupportSQLiteOpenHelper>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideOpenHelperProvidesAdapter extends ProvidesBinding<SupportSQLiteOpenHelper> {
    private final DataModule module;

    private Binding<MaterialisticDatabase> database;

    public ProvideOpenHelperProvidesAdapter(DataModule module) {
      super("androidx.sqlite.db.SupportSQLiteOpenHelper", NOT_SINGLETON, "io.github.hidroh.materialistic.DataModule", "provideOpenHelper");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      database = (Binding<MaterialisticDatabase>) linker.requestBinding("io.github.hidroh.materialistic.data.MaterialisticDatabase", DataModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings,
        Set<Binding<?>> injectMembersBindings) {
      getBindings.add(database);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<SupportSQLiteOpenHelper>}.
     */
    @Override
    public SupportSQLiteOpenHelper get() {
      return module.provideOpenHelper(database.get());
    }
  }
}
