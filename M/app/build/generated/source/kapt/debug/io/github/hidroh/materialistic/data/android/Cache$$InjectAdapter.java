// Code generated by dagger-compiler.  Do not edit.
package io.github.hidroh.materialistic.data.android;

import dagger.internal.Binding;
import dagger.internal.Linker;
import io.github.hidroh.materialistic.data.MaterialisticDatabase;
import java.lang.Override;
import java.lang.SuppressWarnings;
import java.util.Set;
import rx.Scheduler;

/**
 * A {@code Binding<io.github.hidroh.materialistic.data.android.Cache>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code io.github.hidroh.materialistic.data.android.Cache} and its
 * dependencies.
 *
 * Being a {@code Provider<io.github.hidroh.materialistic.data.android.Cache>} and handling creation and
 * preparation of object instances.
 */
public final class Cache$$InjectAdapter extends Binding<Cache> {
  private Binding<MaterialisticDatabase> database;

  private Binding<MaterialisticDatabase.SavedStoriesDao> savedStoriesDao;

  private Binding<MaterialisticDatabase.ReadStoriesDao> readStoriesDao;

  private Binding<MaterialisticDatabase.ReadableDao> readableDao;

  private Binding<Scheduler> mainScheduler;

  public Cache$$InjectAdapter() {
    super("io.github.hidroh.materialistic.data.android.Cache", "members/io.github.hidroh.materialistic.data.android.Cache", NOT_SINGLETON, Cache.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    database = (Binding<MaterialisticDatabase>) linker.requestBinding("io.github.hidroh.materialistic.data.MaterialisticDatabase", Cache.class, getClass().getClassLoader());
    savedStoriesDao = (Binding<MaterialisticDatabase.SavedStoriesDao>) linker.requestBinding("io.github.hidroh.materialistic.data.MaterialisticDatabase$SavedStoriesDao", Cache.class, getClass().getClassLoader());
    readStoriesDao = (Binding<MaterialisticDatabase.ReadStoriesDao>) linker.requestBinding("io.github.hidroh.materialistic.data.MaterialisticDatabase$ReadStoriesDao", Cache.class, getClass().getClassLoader());
    readableDao = (Binding<MaterialisticDatabase.ReadableDao>) linker.requestBinding("io.github.hidroh.materialistic.data.MaterialisticDatabase$ReadableDao", Cache.class, getClass().getClassLoader());
    mainScheduler = (Binding<Scheduler>) linker.requestBinding("@javax.inject.Named(value=main)/rx.Scheduler", Cache.class, getClass().getClassLoader());
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    getBindings.add(database);
    getBindings.add(savedStoriesDao);
    getBindings.add(readStoriesDao);
    getBindings.add(readableDao);
    getBindings.add(mainScheduler);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<Cache>}.
   */
  @Override
  public Cache get() {
    Cache result = new Cache(database.get(), savedStoriesDao.get(), readStoriesDao.get(), readableDao.get(), mainScheduler.get());
    return result;
  }
}
