// Code generated by dagger-compiler.  Do not edit.
package io.github.hidroh.materialistic;

import dagger.internal.Binding;
import dagger.internal.Linker;
import io.github.hidroh.materialistic.data.SessionManager;
import io.github.hidroh.materialistic.widget.PopupMenu;
import java.lang.Override;
import java.lang.SuppressWarnings;
import java.util.Set;

/**
 * A {@code Binding<io.github.hidroh.materialistic.BaseListActivity>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code io.github.hidroh.materialistic.BaseListActivity} and its
 * dependencies.
 *
 * Being a {@code MembersInjector<io.github.hidroh.materialistic.BaseListActivity>} and handling injection
 * of annotated fields.
 */
public final class BaseListActivity$$InjectAdapter extends Binding<BaseListActivity> {
  private Binding<ActionViewResolver> mActionViewResolver;

  private Binding<PopupMenu> mPopupMenu;

  private Binding<SessionManager> mSessionManager;

  private Binding<CustomTabsDelegate> mCustomTabsDelegate;

  private Binding<KeyDelegate> mKeyDelegate;

  private Binding<DrawerActivity> supertype;

  public BaseListActivity$$InjectAdapter() {
    super(null, "members/io.github.hidroh.materialistic.BaseListActivity", NOT_SINGLETON, BaseListActivity.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    mActionViewResolver = (Binding<ActionViewResolver>) linker.requestBinding("io.github.hidroh.materialistic.ActionViewResolver", BaseListActivity.class, getClass().getClassLoader());
    mPopupMenu = (Binding<PopupMenu>) linker.requestBinding("io.github.hidroh.materialistic.widget.PopupMenu", BaseListActivity.class, getClass().getClassLoader());
    mSessionManager = (Binding<SessionManager>) linker.requestBinding("io.github.hidroh.materialistic.data.SessionManager", BaseListActivity.class, getClass().getClassLoader());
    mCustomTabsDelegate = (Binding<CustomTabsDelegate>) linker.requestBinding("io.github.hidroh.materialistic.CustomTabsDelegate", BaseListActivity.class, getClass().getClassLoader());
    mKeyDelegate = (Binding<KeyDelegate>) linker.requestBinding("io.github.hidroh.materialistic.KeyDelegate", BaseListActivity.class, getClass().getClassLoader());
    supertype = (Binding<DrawerActivity>) linker.requestBinding("members/io.github.hidroh.materialistic.DrawerActivity", BaseListActivity.class, getClass().getClassLoader(), false, true);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    injectMembersBindings.add(mActionViewResolver);
    injectMembersBindings.add(mPopupMenu);
    injectMembersBindings.add(mSessionManager);
    injectMembersBindings.add(mCustomTabsDelegate);
    injectMembersBindings.add(mKeyDelegate);
    injectMembersBindings.add(supertype);
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<BaseListActivity>}.
   */
  @Override
  public void injectMembers(BaseListActivity object) {
    object.mActionViewResolver = mActionViewResolver.get();
    object.mPopupMenu = mPopupMenu.get();
    object.mSessionManager = mSessionManager.get();
    object.mCustomTabsDelegate = mCustomTabsDelegate.get();
    object.mKeyDelegate = mKeyDelegate.get();
    supertype.injectMembers(object);
  }
}
