// Code generated by dagger-compiler.  Do not edit.
package io.github.hidroh.materialistic;

import dagger.internal.Binding;
import dagger.internal.Linker;
import io.github.hidroh.materialistic.data.FileDownloader;
import io.github.hidroh.materialistic.data.ItemManager;
import io.github.hidroh.materialistic.data.ReadabilityClient;
import io.github.hidroh.materialistic.widget.PopupMenu;
import java.lang.Override;
import java.lang.SuppressWarnings;
import java.util.Set;

/**
 * A {@code Binding<io.github.hidroh.materialistic.WebFragment>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code io.github.hidroh.materialistic.WebFragment} and its
 * dependencies.
 *
 * Being a {@code Provider<io.github.hidroh.materialistic.WebFragment>} and handling creation and
 * preparation of object instances.
 *
 * Being a {@code MembersInjector<io.github.hidroh.materialistic.WebFragment>} and handling injection
 * of annotated fields.
 */
public final class WebFragment$$InjectAdapter extends Binding<WebFragment> {
  private Binding<ItemManager> mItemManager;

  private Binding<PopupMenu> mPopupMenu;

  private Binding<ReadabilityClient> mReadabilityClient;

  private Binding<FileDownloader> mFileDownloader;

  private Binding<LazyLoadFragment> supertype;

  public WebFragment$$InjectAdapter() {
    super("io.github.hidroh.materialistic.WebFragment", "members/io.github.hidroh.materialistic.WebFragment", NOT_SINGLETON, WebFragment.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    mItemManager = (Binding<ItemManager>) linker.requestBinding("@javax.inject.Named(value=hn)/io.github.hidroh.materialistic.data.ItemManager", WebFragment.class, getClass().getClassLoader());
    mPopupMenu = (Binding<PopupMenu>) linker.requestBinding("io.github.hidroh.materialistic.widget.PopupMenu", WebFragment.class, getClass().getClassLoader());
    mReadabilityClient = (Binding<ReadabilityClient>) linker.requestBinding("io.github.hidroh.materialistic.data.ReadabilityClient", WebFragment.class, getClass().getClassLoader());
    mFileDownloader = (Binding<FileDownloader>) linker.requestBinding("io.github.hidroh.materialistic.data.FileDownloader", WebFragment.class, getClass().getClassLoader());
    supertype = (Binding<LazyLoadFragment>) linker.requestBinding("members/io.github.hidroh.materialistic.LazyLoadFragment", WebFragment.class, getClass().getClassLoader(), false, true);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    injectMembersBindings.add(mItemManager);
    injectMembersBindings.add(mPopupMenu);
    injectMembersBindings.add(mReadabilityClient);
    injectMembersBindings.add(mFileDownloader);
    injectMembersBindings.add(supertype);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<WebFragment>}.
   */
  @Override
  public WebFragment get() {
    WebFragment result = new WebFragment();
    injectMembers(result);
    return result;
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<WebFragment>}.
   */
  @Override
  public void injectMembers(WebFragment object) {
    object.mItemManager = mItemManager.get();
    object.mPopupMenu = mPopupMenu.get();
    object.mReadabilityClient = mReadabilityClient.get();
    object.mFileDownloader = mFileDownloader.get();
    supertype.injectMembers(object);
  }
}
