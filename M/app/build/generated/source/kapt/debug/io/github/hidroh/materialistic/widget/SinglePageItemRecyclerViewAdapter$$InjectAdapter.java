// Code generated by dagger-compiler.  Do not edit.
package io.github.hidroh.materialistic.widget;

import dagger.internal.Binding;
import dagger.internal.Linker;
import io.github.hidroh.materialistic.ResourcesProvider;
import java.lang.Override;
import java.lang.SuppressWarnings;
import java.util.Set;

/**
 * A {@code Binding<io.github.hidroh.materialistic.widget.SinglePageItemRecyclerViewAdapter>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code io.github.hidroh.materialistic.widget.SinglePageItemRecyclerViewAdapter} and its
 * dependencies.
 *
 * Being a {@code Provider<io.github.hidroh.materialistic.widget.SinglePageItemRecyclerViewAdapter>} and handling creation and
 * preparation of object instances.
 *
 * Being a {@code MembersInjector<io.github.hidroh.materialistic.widget.SinglePageItemRecyclerViewAdapter>} and handling injection
 * of annotated fields.
 */
public final class SinglePageItemRecyclerViewAdapter$$InjectAdapter extends Binding<SinglePageItemRecyclerViewAdapter> {
  private Binding<ResourcesProvider> mResourcesProvider;

  private Binding<ItemRecyclerViewAdapter> supertype;

  public SinglePageItemRecyclerViewAdapter$$InjectAdapter() {
    super(null, "members/io.github.hidroh.materialistic.widget.SinglePageItemRecyclerViewAdapter", NOT_SINGLETON, SinglePageItemRecyclerViewAdapter.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    mResourcesProvider = (Binding<ResourcesProvider>) linker.requestBinding("io.github.hidroh.materialistic.ResourcesProvider", SinglePageItemRecyclerViewAdapter.class, getClass().getClassLoader());
    supertype = (Binding<ItemRecyclerViewAdapter>) linker.requestBinding("members/io.github.hidroh.materialistic.widget.ItemRecyclerViewAdapter", SinglePageItemRecyclerViewAdapter.class, getClass().getClassLoader(), false, true);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    injectMembersBindings.add(mResourcesProvider);
    injectMembersBindings.add(supertype);
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<SinglePageItemRecyclerViewAdapter>}.
   */
  @Override
  public void injectMembers(SinglePageItemRecyclerViewAdapter object) {
    object.mResourcesProvider = mResourcesProvider.get();
    supertype.injectMembers(object);
  }
}
