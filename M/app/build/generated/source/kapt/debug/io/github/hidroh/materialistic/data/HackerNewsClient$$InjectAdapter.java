// Code generated by dagger-compiler.  Do not edit.
package io.github.hidroh.materialistic.data;

import dagger.internal.Binding;
import dagger.internal.Linker;
import java.lang.Override;
import java.lang.SuppressWarnings;
import java.util.Set;
import rx.Scheduler;

/**
 * A {@code Binding<io.github.hidroh.materialistic.data.HackerNewsClient>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code io.github.hidroh.materialistic.data.HackerNewsClient} and its
 * dependencies.
 *
 * Being a {@code Provider<io.github.hidroh.materialistic.data.HackerNewsClient>} and handling creation and
 * preparation of object instances.
 *
 * Being a {@code MembersInjector<io.github.hidroh.materialistic.data.HackerNewsClient>} and handling injection
 * of annotated fields.
 */
public final class HackerNewsClient$$InjectAdapter extends Binding<HackerNewsClient> {
  private Binding<Scheduler> field_mIoScheduler;

  private Binding<Scheduler> field_mMainThreadScheduler;

  private Binding<RestServiceFactory> parameter_factory;

  private Binding<SessionManager> parameter_sessionManager;

  private Binding<FavoriteManager> parameter_favoriteManager;

  public HackerNewsClient$$InjectAdapter() {
    super("io.github.hidroh.materialistic.data.HackerNewsClient", "members/io.github.hidroh.materialistic.data.HackerNewsClient", NOT_SINGLETON, HackerNewsClient.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    parameter_factory = (Binding<RestServiceFactory>) linker.requestBinding("io.github.hidroh.materialistic.data.RestServiceFactory", HackerNewsClient.class, getClass().getClassLoader());
    parameter_sessionManager = (Binding<SessionManager>) linker.requestBinding("io.github.hidroh.materialistic.data.SessionManager", HackerNewsClient.class, getClass().getClassLoader());
    parameter_favoriteManager = (Binding<FavoriteManager>) linker.requestBinding("io.github.hidroh.materialistic.data.FavoriteManager", HackerNewsClient.class, getClass().getClassLoader());
    field_mIoScheduler = (Binding<Scheduler>) linker.requestBinding("@javax.inject.Named(value=io)/rx.Scheduler", HackerNewsClient.class, getClass().getClassLoader());
    field_mMainThreadScheduler = (Binding<Scheduler>) linker.requestBinding("@javax.inject.Named(value=main)/rx.Scheduler", HackerNewsClient.class, getClass().getClassLoader());
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    getBindings.add(parameter_factory);
    getBindings.add(parameter_sessionManager);
    getBindings.add(parameter_favoriteManager);
    injectMembersBindings.add(field_mIoScheduler);
    injectMembersBindings.add(field_mMainThreadScheduler);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<HackerNewsClient>}.
   */
  @Override
  public HackerNewsClient get() {
    HackerNewsClient result = new HackerNewsClient(parameter_factory.get(), parameter_sessionManager.get(), parameter_favoriteManager.get());
    injectMembers(result);
    return result;
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<HackerNewsClient>}.
   */
  @Override
  public void injectMembers(HackerNewsClient object) {
    object.mIoScheduler = field_mIoScheduler.get();
    object.mMainThreadScheduler = field_mMainThreadScheduler.get();
  }
}
