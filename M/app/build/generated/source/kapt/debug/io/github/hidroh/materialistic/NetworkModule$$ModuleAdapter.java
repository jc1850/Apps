// Code generated by dagger-compiler.  Do not edit.
package io.github.hidroh.materialistic;

import android.content.Context;
import dagger.internal.Binding;
import dagger.internal.BindingsGroup;
import dagger.internal.Linker;
import dagger.internal.ModuleAdapter;
import dagger.internal.ProvidesBinding;
import io.github.hidroh.materialistic.data.FileDownloader;
import io.github.hidroh.materialistic.data.RestServiceFactory;
import java.lang.Class;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Set;
import okhttp3.Call;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @dagger.Provides} methods.
 */
public final class NetworkModule$$ModuleAdapter extends ModuleAdapter<NetworkModule> {
  private static final String[] INJECTS = { };

  private static final Class<?>[] STATIC_INJECTIONS = { };

  private static final Class<?>[] INCLUDES = { };

  public NetworkModule$$ModuleAdapter() {
    super(NetworkModule.class, INJECTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, false /*complete*/, true /*library*/);
  }

  @Override
  public NetworkModule newModule() {
    return new NetworkModule();
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(BindingsGroup bindings, NetworkModule module) {
    bindings.contributeProvidesBinding("io.github.hidroh.materialistic.data.RestServiceFactory", new ProvideRestServiceFactoryProvidesAdapter(module));
    bindings.contributeProvidesBinding("okhttp3.Call$Factory", new ProvideCallFactoryProvidesAdapter(module));
    bindings.contributeProvidesBinding("io.github.hidroh.materialistic.data.FileDownloader", new ProvideFileDownloaderProvidesAdapter(module));
  }

  /**
   * A {@code Binding<RestServiceFactory>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code RestServiceFactory} and its
   * dependencies.
   *
   * Being a {@code Provider<RestServiceFactory>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideRestServiceFactoryProvidesAdapter extends ProvidesBinding<RestServiceFactory> {
    private final NetworkModule module;

    private Binding<Call.Factory> callFactory;

    public ProvideRestServiceFactoryProvidesAdapter(NetworkModule module) {
      super("io.github.hidroh.materialistic.data.RestServiceFactory", IS_SINGLETON, "io.github.hidroh.materialistic.NetworkModule", "provideRestServiceFactory");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      callFactory = (Binding<Call.Factory>) linker.requestBinding("okhttp3.Call$Factory", NetworkModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings,
        Set<Binding<?>> injectMembersBindings) {
      getBindings.add(callFactory);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<RestServiceFactory>}.
     */
    @Override
    public RestServiceFactory get() {
      return module.provideRestServiceFactory(callFactory.get());
    }
  }

  /**
   * A {@code Binding<Call.Factory>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code Call.Factory} and its
   * dependencies.
   *
   * Being a {@code Provider<Call.Factory>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideCallFactoryProvidesAdapter extends ProvidesBinding<Call.Factory> {
    private final NetworkModule module;

    private Binding<Context> context;

    public ProvideCallFactoryProvidesAdapter(NetworkModule module) {
      super("okhttp3.Call$Factory", IS_SINGLETON, "io.github.hidroh.materialistic.NetworkModule", "provideCallFactory");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      context = (Binding<Context>) linker.requestBinding("android.content.Context", NetworkModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings,
        Set<Binding<?>> injectMembersBindings) {
      getBindings.add(context);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<Call.Factory>}.
     */
    @Override
    public Call.Factory get() {
      return module.provideCallFactory(context.get());
    }
  }

  /**
   * A {@code Binding<FileDownloader>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code FileDownloader} and its
   * dependencies.
   *
   * Being a {@code Provider<FileDownloader>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideFileDownloaderProvidesAdapter extends ProvidesBinding<FileDownloader> {
    private final NetworkModule module;

    private Binding<Context> context;

    private Binding<Call.Factory> callFactory;

    public ProvideFileDownloaderProvidesAdapter(NetworkModule module) {
      super("io.github.hidroh.materialistic.data.FileDownloader", IS_SINGLETON, "io.github.hidroh.materialistic.NetworkModule", "provideFileDownloader");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      context = (Binding<Context>) linker.requestBinding("android.content.Context", NetworkModule.class, getClass().getClassLoader());
      callFactory = (Binding<Call.Factory>) linker.requestBinding("okhttp3.Call$Factory", NetworkModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings,
        Set<Binding<?>> injectMembersBindings) {
      getBindings.add(context);
      getBindings.add(callFactory);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<FileDownloader>}.
     */
    @Override
    public FileDownloader get() {
      return module.provideFileDownloader(context.get(), callFactory.get());
    }
  }
}
