// Code generated by dagger-compiler.  Do not edit.
package io.github.hidroh.materialistic;

import android.accounts.AccountManager;
import androidx.sqlite.db.SupportSQLiteOpenHelper;
import dagger.internal.Binding;
import dagger.internal.BindingsGroup;
import dagger.internal.Linker;
import dagger.internal.ModuleAdapter;
import dagger.internal.ProvidesBinding;
import io.github.hidroh.materialistic.accounts.UserServices;
import io.github.hidroh.materialistic.data.FavoriteManager;
import io.github.hidroh.materialistic.data.FeedbackClient;
import io.github.hidroh.materialistic.data.FileDownloader;
import io.github.hidroh.materialistic.data.ItemManager;
import io.github.hidroh.materialistic.data.MaterialisticDatabase;
import io.github.hidroh.materialistic.data.ReadabilityClient;
import io.github.hidroh.materialistic.data.RestServiceFactory;
import io.github.hidroh.materialistic.data.SessionManager;
import io.github.hidroh.materialistic.data.SyncDelegate;
import io.github.hidroh.materialistic.data.SyncScheduler;
import io.github.hidroh.materialistic.data.UserManager;
import io.github.hidroh.materialistic.widget.PopupMenu;
import java.lang.Class;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Set;
import okhttp3.Call;
import rx.Scheduler;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @dagger.Provides} methods.
 */
public final class TestActivityModule$$ModuleAdapter extends ModuleAdapter<TestActivityModule> {
  private static final String[] INJECTS = { "members/io.github.hidroh.materialistic.LoginActivity", "members/io.github.hidroh.materialistic.SettingsActivity", "members/io.github.hidroh.materialistic.AskActivity", "members/io.github.hidroh.materialistic.AboutActivity", "members/io.github.hidroh.materialistic.FavoriteActivity", "members/io.github.hidroh.materialistic.FeedbackActivity", "members/io.github.hidroh.materialistic.ItemActivity", "members/io.github.hidroh.materialistic.JobsActivity", "members/io.github.hidroh.materialistic.ListActivity", "members/io.github.hidroh.materialistic.BestActivity", "members/io.github.hidroh.materialistic.NewActivity", "members/io.github.hidroh.materialistic.SearchActivity", "members/io.github.hidroh.materialistic.ShowActivity", "members/io.github.hidroh.materialistic.test.WebActivity", "members/io.github.hidroh.materialistic.PopularActivity", "members/io.github.hidroh.materialistic.ComposeActivity", "members/io.github.hidroh.materialistic.SubmitActivity", "members/io.github.hidroh.materialistic.UserActivity", "members/io.github.hidroh.materialistic.ThreadPreviewActivity", "members/io.github.hidroh.materialistic.appwidget.WidgetConfigActivity", "members/io.github.hidroh.materialistic.FavoriteFragment", "members/io.github.hidroh.materialistic.ItemFragment", "members/io.github.hidroh.materialistic.ListFragment", "members/io.github.hidroh.materialistic.WebFragment", "members/io.github.hidroh.materialistic.ReleaseNotesActivity", "members/io.github.hidroh.materialistic.widget.StoryRecyclerViewAdapter", "members/io.github.hidroh.materialistic.widget.FavoriteRecyclerViewAdapter", "members/io.github.hidroh.materialistic.widget.SinglePageItemRecyclerViewAdapter", "members/io.github.hidroh.materialistic.widget.MultiPageItemRecyclerViewAdapter", "members/io.github.hidroh.materialistic.widget.SubmissionRecyclerViewAdapter", "members/io.github.hidroh.materialistic.widget.ThreadPreviewRecyclerViewAdapter", "members/io.github.hidroh.materialistic.data.ItemSyncService", "members/io.github.hidroh.materialistic.AppUtilsTest", "members/io.github.hidroh.materialistic.test.TestReadabilityActivity", "members/io.github.hidroh.materialistic.test.TestListActivity", "members/io.github.hidroh.materialistic.test.ListActivity", "members/io.github.hidroh.materialistic.data.FavoriteManagerTest", "members/io.github.hidroh.materialistic.test.TestFavoriteActivity", "members/io.github.hidroh.materialistic.data.ItemSyncJobServiceTest$TestItemSyncJobService", };

  private static final Class<?>[] STATIC_INJECTIONS = { };

  private static final Class<?>[] INCLUDES = { };

  public TestActivityModule$$ModuleAdapter() {
    super(TestActivityModule.class, INJECTS, STATIC_INJECTIONS, true /*overrides*/, INCLUDES, true /*complete*/, true /*library*/);
  }

  @Override
  public TestActivityModule newModule() {
    return new TestActivityModule();
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(BindingsGroup bindings, TestActivityModule module) {
    bindings.contributeProvidesBinding("@javax.inject.Named(value=hn)/io.github.hidroh.materialistic.data.ItemManager", new ProvideHackerNewsClientProvidesAdapter(module));
    bindings.contributeProvidesBinding("@javax.inject.Named(value=algolia)/io.github.hidroh.materialistic.data.ItemManager", new ProvideAlgoliaClientProvidesAdapter(module));
    bindings.contributeProvidesBinding("@javax.inject.Named(value=popular)/io.github.hidroh.materialistic.data.ItemManager", new ProvideAlgoliaPopularClientProvidesAdapter(module));
    bindings.contributeProvidesBinding("io.github.hidroh.materialistic.data.FavoriteManager", new ProvideFavoriteManagerProvidesAdapter(module));
    bindings.contributeProvidesBinding("io.github.hidroh.materialistic.data.SessionManager", new ProvideSessionManagerProvidesAdapter(module));
    bindings.contributeProvidesBinding("io.github.hidroh.materialistic.data.FeedbackClient", new ProvideFeedbackClientProvidesAdapter(module));
    bindings.contributeProvidesBinding("io.github.hidroh.materialistic.data.ReadabilityClient", new ProvideReadabilityClientProvidesAdapter(module));
    bindings.contributeProvidesBinding("io.github.hidroh.materialistic.data.UserManager", new ProvideUserManagerProvidesAdapter(module));
    bindings.contributeProvidesBinding("io.github.hidroh.materialistic.data.RestServiceFactory", new ProvideRestServiceFactoryProvidesAdapter(module));
    bindings.contributeProvidesBinding("io.github.hidroh.materialistic.data.FileDownloader", new ProvideFileDownloaderProvidesAdapter(module));
    bindings.contributeProvidesBinding("okhttp3.Call$Factory", new ProvideCallFactoryProvidesAdapter(module));
    bindings.contributeProvidesBinding("io.github.hidroh.materialistic.ActionViewResolver", new ProvideActionViewResolverProvidesAdapter(module));
    bindings.contributeProvidesBinding("io.github.hidroh.materialistic.AlertDialogBuilder", new ProvideAlertDialogBuilderProvidesAdapter(module));
    bindings.contributeProvidesBinding("io.github.hidroh.materialistic.accounts.UserServices", new ProvideUserServicesProvidesAdapter(module));
    bindings.contributeProvidesBinding("android.accounts.AccountManager", new ProvideAccountManagerProvidesAdapter(module));
    bindings.contributeProvidesBinding("io.github.hidroh.materialistic.KeyDelegate", new ProvideVolumeNavigationDelegateProvidesAdapter(module));
    bindings.contributeProvidesBinding("io.github.hidroh.materialistic.widget.PopupMenu", new ProvidePopupMenuProvidesAdapter(module));
    bindings.contributeProvidesBinding("io.github.hidroh.materialistic.CustomTabsDelegate", new ProvideCustomTabsDelegateProvidesAdapter(module));
    bindings.contributeProvidesBinding("io.github.hidroh.materialistic.ResourcesProvider", new ProvideResourcesProviderProvidesAdapter(module));
    bindings.contributeProvidesBinding("io.github.hidroh.materialistic.data.SyncDelegate", new ProvideSyncDelegateProvidesAdapter(module));
    bindings.contributeProvidesBinding("io.github.hidroh.materialistic.data.SyncScheduler", new ProvideSyncSchedulerProvidesAdapter(module));
    bindings.contributeProvidesBinding("@javax.inject.Named(value=main)/rx.Scheduler", new ProvideMainThreadSchedulerProvidesAdapter(module));
    bindings.contributeProvidesBinding("@javax.inject.Named(value=io)/rx.Scheduler", new ProvideIoThreadSchedulerProvidesAdapter(module));
    bindings.contributeProvidesBinding("io.github.hidroh.materialistic.data.MaterialisticDatabase", new ProvideDatabaseProvidesAdapter(module));
    bindings.contributeProvidesBinding("io.github.hidroh.materialistic.data.MaterialisticDatabase$SavedStoriesDao", new ProvideSavedStoriesDaoProvidesAdapter(module));
    bindings.contributeProvidesBinding("io.github.hidroh.materialistic.data.MaterialisticDatabase$ReadStoriesDao", new ProvideReadStoriesDaoProvidesAdapter(module));
    bindings.contributeProvidesBinding("io.github.hidroh.materialistic.data.MaterialisticDatabase$ReadableDao", new ProvideReadableDaoProvidesAdapter(module));
    bindings.contributeProvidesBinding("androidx.sqlite.db.SupportSQLiteOpenHelper", new ProvideOpenHelperProvidesAdapter(module));
  }

  /**
   * A {@code Binding<ItemManager>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<ItemManager>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideHackerNewsClientProvidesAdapter extends ProvidesBinding<ItemManager> {
    private final TestActivityModule module;

    public ProvideHackerNewsClientProvidesAdapter(TestActivityModule module) {
      super("@javax.inject.Named(value=hn)/io.github.hidroh.materialistic.data.ItemManager", IS_SINGLETON, "io.github.hidroh.materialistic.TestActivityModule", "provideHackerNewsClient");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<ItemManager>}.
     */
    @Override
    public ItemManager get() {
      return module.provideHackerNewsClient();
    }
  }

  /**
   * A {@code Binding<ItemManager>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<ItemManager>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideAlgoliaClientProvidesAdapter extends ProvidesBinding<ItemManager> {
    private final TestActivityModule module;

    public ProvideAlgoliaClientProvidesAdapter(TestActivityModule module) {
      super("@javax.inject.Named(value=algolia)/io.github.hidroh.materialistic.data.ItemManager", IS_SINGLETON, "io.github.hidroh.materialistic.TestActivityModule", "provideAlgoliaClient");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<ItemManager>}.
     */
    @Override
    public ItemManager get() {
      return module.provideAlgoliaClient();
    }
  }

  /**
   * A {@code Binding<ItemManager>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<ItemManager>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideAlgoliaPopularClientProvidesAdapter extends ProvidesBinding<ItemManager> {
    private final TestActivityModule module;

    public ProvideAlgoliaPopularClientProvidesAdapter(TestActivityModule module) {
      super("@javax.inject.Named(value=popular)/io.github.hidroh.materialistic.data.ItemManager", IS_SINGLETON, "io.github.hidroh.materialistic.TestActivityModule", "provideAlgoliaPopularClient");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<ItemManager>}.
     */
    @Override
    public ItemManager get() {
      return module.provideAlgoliaPopularClient();
    }
  }

  /**
   * A {@code Binding<FavoriteManager>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<FavoriteManager>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideFavoriteManagerProvidesAdapter extends ProvidesBinding<FavoriteManager> {
    private final TestActivityModule module;

    public ProvideFavoriteManagerProvidesAdapter(TestActivityModule module) {
      super("io.github.hidroh.materialistic.data.FavoriteManager", IS_SINGLETON, "io.github.hidroh.materialistic.TestActivityModule", "provideFavoriteManager");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<FavoriteManager>}.
     */
    @Override
    public FavoriteManager get() {
      return module.provideFavoriteManager();
    }
  }

  /**
   * A {@code Binding<SessionManager>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<SessionManager>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideSessionManagerProvidesAdapter extends ProvidesBinding<SessionManager> {
    private final TestActivityModule module;

    public ProvideSessionManagerProvidesAdapter(TestActivityModule module) {
      super("io.github.hidroh.materialistic.data.SessionManager", IS_SINGLETON, "io.github.hidroh.materialistic.TestActivityModule", "provideSessionManager");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<SessionManager>}.
     */
    @Override
    public SessionManager get() {
      return module.provideSessionManager();
    }
  }

  /**
   * A {@code Binding<FeedbackClient>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<FeedbackClient>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideFeedbackClientProvidesAdapter extends ProvidesBinding<FeedbackClient> {
    private final TestActivityModule module;

    public ProvideFeedbackClientProvidesAdapter(TestActivityModule module) {
      super("io.github.hidroh.materialistic.data.FeedbackClient", IS_SINGLETON, "io.github.hidroh.materialistic.TestActivityModule", "provideFeedbackClient");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<FeedbackClient>}.
     */
    @Override
    public FeedbackClient get() {
      return module.provideFeedbackClient();
    }
  }

  /**
   * A {@code Binding<ReadabilityClient>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<ReadabilityClient>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideReadabilityClientProvidesAdapter extends ProvidesBinding<ReadabilityClient> {
    private final TestActivityModule module;

    public ProvideReadabilityClientProvidesAdapter(TestActivityModule module) {
      super("io.github.hidroh.materialistic.data.ReadabilityClient", IS_SINGLETON, "io.github.hidroh.materialistic.TestActivityModule", "provideReadabilityClient");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<ReadabilityClient>}.
     */
    @Override
    public ReadabilityClient get() {
      return module.provideReadabilityClient();
    }
  }

  /**
   * A {@code Binding<UserManager>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<UserManager>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideUserManagerProvidesAdapter extends ProvidesBinding<UserManager> {
    private final TestActivityModule module;

    public ProvideUserManagerProvidesAdapter(TestActivityModule module) {
      super("io.github.hidroh.materialistic.data.UserManager", IS_SINGLETON, "io.github.hidroh.materialistic.TestActivityModule", "provideUserManager");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<UserManager>}.
     */
    @Override
    public UserManager get() {
      return module.provideUserManager();
    }
  }

  /**
   * A {@code Binding<RestServiceFactory>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<RestServiceFactory>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideRestServiceFactoryProvidesAdapter extends ProvidesBinding<RestServiceFactory> {
    private final TestActivityModule module;

    public ProvideRestServiceFactoryProvidesAdapter(TestActivityModule module) {
      super("io.github.hidroh.materialistic.data.RestServiceFactory", IS_SINGLETON, "io.github.hidroh.materialistic.TestActivityModule", "provideRestServiceFactory");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<RestServiceFactory>}.
     */
    @Override
    public RestServiceFactory get() {
      return module.provideRestServiceFactory();
    }
  }

  /**
   * A {@code Binding<FileDownloader>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<FileDownloader>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideFileDownloaderProvidesAdapter extends ProvidesBinding<FileDownloader> {
    private final TestActivityModule module;

    public ProvideFileDownloaderProvidesAdapter(TestActivityModule module) {
      super("io.github.hidroh.materialistic.data.FileDownloader", IS_SINGLETON, "io.github.hidroh.materialistic.TestActivityModule", "provideFileDownloader");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<FileDownloader>}.
     */
    @Override
    public FileDownloader get() {
      return module.provideFileDownloader();
    }
  }

  /**
   * A {@code Binding<Call.Factory>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<Call.Factory>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideCallFactoryProvidesAdapter extends ProvidesBinding<Call.Factory> {
    private final TestActivityModule module;

    public ProvideCallFactoryProvidesAdapter(TestActivityModule module) {
      super("okhttp3.Call$Factory", IS_SINGLETON, "io.github.hidroh.materialistic.TestActivityModule", "provideCallFactory");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<Call.Factory>}.
     */
    @Override
    public Call.Factory get() {
      return module.provideCallFactory();
    }
  }

  /**
   * A {@code Binding<ActionViewResolver>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<ActionViewResolver>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideActionViewResolverProvidesAdapter extends ProvidesBinding<ActionViewResolver> {
    private final TestActivityModule module;

    public ProvideActionViewResolverProvidesAdapter(TestActivityModule module) {
      super("io.github.hidroh.materialistic.ActionViewResolver", IS_SINGLETON, "io.github.hidroh.materialistic.TestActivityModule", "provideActionViewResolver");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<ActionViewResolver>}.
     */
    @Override
    public ActionViewResolver get() {
      return module.provideActionViewResolver();
    }
  }

  /**
   * A {@code Binding<AlertDialogBuilder>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<AlertDialogBuilder>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideAlertDialogBuilderProvidesAdapter extends ProvidesBinding<AlertDialogBuilder> {
    private final TestActivityModule module;

    public ProvideAlertDialogBuilderProvidesAdapter(TestActivityModule module) {
      super("io.github.hidroh.materialistic.AlertDialogBuilder", NOT_SINGLETON, "io.github.hidroh.materialistic.TestActivityModule", "provideAlertDialogBuilder");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<AlertDialogBuilder>}.
     */
    @Override
    public AlertDialogBuilder get() {
      return module.provideAlertDialogBuilder();
    }
  }

  /**
   * A {@code Binding<UserServices>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<UserServices>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideUserServicesProvidesAdapter extends ProvidesBinding<UserServices> {
    private final TestActivityModule module;

    public ProvideUserServicesProvidesAdapter(TestActivityModule module) {
      super("io.github.hidroh.materialistic.accounts.UserServices", IS_SINGLETON, "io.github.hidroh.materialistic.TestActivityModule", "provideUserServices");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<UserServices>}.
     */
    @Override
    public UserServices get() {
      return module.provideUserServices();
    }
  }

  /**
   * A {@code Binding<AccountManager>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<AccountManager>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideAccountManagerProvidesAdapter extends ProvidesBinding<AccountManager> {
    private final TestActivityModule module;

    public ProvideAccountManagerProvidesAdapter(TestActivityModule module) {
      super("android.accounts.AccountManager", NOT_SINGLETON, "io.github.hidroh.materialistic.TestActivityModule", "provideAccountManager");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<AccountManager>}.
     */
    @Override
    public AccountManager get() {
      return module.provideAccountManager();
    }
  }

  /**
   * A {@code Binding<KeyDelegate>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<KeyDelegate>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideVolumeNavigationDelegateProvidesAdapter extends ProvidesBinding<KeyDelegate> {
    private final TestActivityModule module;

    public ProvideVolumeNavigationDelegateProvidesAdapter(TestActivityModule module) {
      super("io.github.hidroh.materialistic.KeyDelegate", IS_SINGLETON, "io.github.hidroh.materialistic.TestActivityModule", "provideVolumeNavigationDelegate");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<KeyDelegate>}.
     */
    @Override
    public KeyDelegate get() {
      return module.provideVolumeNavigationDelegate();
    }
  }

  /**
   * A {@code Binding<PopupMenu>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<PopupMenu>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvidePopupMenuProvidesAdapter extends ProvidesBinding<PopupMenu> {
    private final TestActivityModule module;

    public ProvidePopupMenuProvidesAdapter(TestActivityModule module) {
      super("io.github.hidroh.materialistic.widget.PopupMenu", NOT_SINGLETON, "io.github.hidroh.materialistic.TestActivityModule", "providePopupMenu");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<PopupMenu>}.
     */
    @Override
    public PopupMenu get() {
      return module.providePopupMenu();
    }
  }

  /**
   * A {@code Binding<CustomTabsDelegate>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<CustomTabsDelegate>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideCustomTabsDelegateProvidesAdapter extends ProvidesBinding<CustomTabsDelegate> {
    private final TestActivityModule module;

    public ProvideCustomTabsDelegateProvidesAdapter(TestActivityModule module) {
      super("io.github.hidroh.materialistic.CustomTabsDelegate", IS_SINGLETON, "io.github.hidroh.materialistic.TestActivityModule", "provideCustomTabsDelegate");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<CustomTabsDelegate>}.
     */
    @Override
    public CustomTabsDelegate get() {
      return module.provideCustomTabsDelegate();
    }
  }

  /**
   * A {@code Binding<ResourcesProvider>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<ResourcesProvider>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideResourcesProviderProvidesAdapter extends ProvidesBinding<ResourcesProvider> {
    private final TestActivityModule module;

    public ProvideResourcesProviderProvidesAdapter(TestActivityModule module) {
      super("io.github.hidroh.materialistic.ResourcesProvider", IS_SINGLETON, "io.github.hidroh.materialistic.TestActivityModule", "provideResourcesProvider");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<ResourcesProvider>}.
     */
    @Override
    public ResourcesProvider get() {
      return module.provideResourcesProvider();
    }
  }

  /**
   * A {@code Binding<SyncDelegate>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<SyncDelegate>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideSyncDelegateProvidesAdapter extends ProvidesBinding<SyncDelegate> {
    private final TestActivityModule module;

    public ProvideSyncDelegateProvidesAdapter(TestActivityModule module) {
      super("io.github.hidroh.materialistic.data.SyncDelegate", IS_SINGLETON, "io.github.hidroh.materialistic.TestActivityModule", "provideSyncDelegate");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<SyncDelegate>}.
     */
    @Override
    public SyncDelegate get() {
      return module.provideSyncDelegate();
    }
  }

  /**
   * A {@code Binding<SyncScheduler>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<SyncScheduler>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideSyncSchedulerProvidesAdapter extends ProvidesBinding<SyncScheduler> {
    private final TestActivityModule module;

    public ProvideSyncSchedulerProvidesAdapter(TestActivityModule module) {
      super("io.github.hidroh.materialistic.data.SyncScheduler", IS_SINGLETON, "io.github.hidroh.materialistic.TestActivityModule", "provideSyncScheduler");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<SyncScheduler>}.
     */
    @Override
    public SyncScheduler get() {
      return module.provideSyncScheduler();
    }
  }

  /**
   * A {@code Binding<Scheduler>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<Scheduler>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideMainThreadSchedulerProvidesAdapter extends ProvidesBinding<Scheduler> {
    private final TestActivityModule module;

    public ProvideMainThreadSchedulerProvidesAdapter(TestActivityModule module) {
      super("@javax.inject.Named(value=main)/rx.Scheduler", IS_SINGLETON, "io.github.hidroh.materialistic.TestActivityModule", "provideMainThreadScheduler");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<Scheduler>}.
     */
    @Override
    public Scheduler get() {
      return module.provideMainThreadScheduler();
    }
  }

  /**
   * A {@code Binding<Scheduler>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<Scheduler>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideIoThreadSchedulerProvidesAdapter extends ProvidesBinding<Scheduler> {
    private final TestActivityModule module;

    public ProvideIoThreadSchedulerProvidesAdapter(TestActivityModule module) {
      super("@javax.inject.Named(value=io)/rx.Scheduler", IS_SINGLETON, "io.github.hidroh.materialistic.TestActivityModule", "provideIoThreadScheduler");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<Scheduler>}.
     */
    @Override
    public Scheduler get() {
      return module.provideIoThreadScheduler();
    }
  }

  /**
   * A {@code Binding<MaterialisticDatabase>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<MaterialisticDatabase>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideDatabaseProvidesAdapter extends ProvidesBinding<MaterialisticDatabase> {
    private final TestActivityModule module;

    public ProvideDatabaseProvidesAdapter(TestActivityModule module) {
      super("io.github.hidroh.materialistic.data.MaterialisticDatabase", NOT_SINGLETON, "io.github.hidroh.materialistic.TestActivityModule", "provideDatabase");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<MaterialisticDatabase>}.
     */
    @Override
    public MaterialisticDatabase get() {
      return module.provideDatabase();
    }
  }

  /**
   * A {@code Binding<MaterialisticDatabase.SavedStoriesDao>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code MaterialisticDatabase.SavedStoriesDao} and its
   * dependencies.
   *
   * Being a {@code Provider<MaterialisticDatabase.SavedStoriesDao>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideSavedStoriesDaoProvidesAdapter extends ProvidesBinding<MaterialisticDatabase.SavedStoriesDao> {
    private final TestActivityModule module;

    private Binding<MaterialisticDatabase> database;

    public ProvideSavedStoriesDaoProvidesAdapter(TestActivityModule module) {
      super("io.github.hidroh.materialistic.data.MaterialisticDatabase$SavedStoriesDao", NOT_SINGLETON, "io.github.hidroh.materialistic.TestActivityModule", "provideSavedStoriesDao");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      database = (Binding<MaterialisticDatabase>) linker.requestBinding("io.github.hidroh.materialistic.data.MaterialisticDatabase", TestActivityModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings,
        Set<Binding<?>> injectMembersBindings) {
      getBindings.add(database);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<MaterialisticDatabase.SavedStoriesDao>}.
     */
    @Override
    public MaterialisticDatabase.SavedStoriesDao get() {
      return module.provideSavedStoriesDao(database.get());
    }
  }

  /**
   * A {@code Binding<MaterialisticDatabase.ReadStoriesDao>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code MaterialisticDatabase.ReadStoriesDao} and its
   * dependencies.
   *
   * Being a {@code Provider<MaterialisticDatabase.ReadStoriesDao>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideReadStoriesDaoProvidesAdapter extends ProvidesBinding<MaterialisticDatabase.ReadStoriesDao> {
    private final TestActivityModule module;

    private Binding<MaterialisticDatabase> database;

    public ProvideReadStoriesDaoProvidesAdapter(TestActivityModule module) {
      super("io.github.hidroh.materialistic.data.MaterialisticDatabase$ReadStoriesDao", NOT_SINGLETON, "io.github.hidroh.materialistic.TestActivityModule", "provideReadStoriesDao");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      database = (Binding<MaterialisticDatabase>) linker.requestBinding("io.github.hidroh.materialistic.data.MaterialisticDatabase", TestActivityModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings,
        Set<Binding<?>> injectMembersBindings) {
      getBindings.add(database);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<MaterialisticDatabase.ReadStoriesDao>}.
     */
    @Override
    public MaterialisticDatabase.ReadStoriesDao get() {
      return module.provideReadStoriesDao(database.get());
    }
  }

  /**
   * A {@code Binding<MaterialisticDatabase.ReadableDao>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code MaterialisticDatabase.ReadableDao} and its
   * dependencies.
   *
   * Being a {@code Provider<MaterialisticDatabase.ReadableDao>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideReadableDaoProvidesAdapter extends ProvidesBinding<MaterialisticDatabase.ReadableDao> {
    private final TestActivityModule module;

    private Binding<MaterialisticDatabase> database;

    public ProvideReadableDaoProvidesAdapter(TestActivityModule module) {
      super("io.github.hidroh.materialistic.data.MaterialisticDatabase$ReadableDao", NOT_SINGLETON, "io.github.hidroh.materialistic.TestActivityModule", "provideReadableDao");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      database = (Binding<MaterialisticDatabase>) linker.requestBinding("io.github.hidroh.materialistic.data.MaterialisticDatabase", TestActivityModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings,
        Set<Binding<?>> injectMembersBindings) {
      getBindings.add(database);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<MaterialisticDatabase.ReadableDao>}.
     */
    @Override
    public MaterialisticDatabase.ReadableDao get() {
      return module.provideReadableDao(database.get());
    }
  }

  /**
   * A {@code Binding<SupportSQLiteOpenHelper>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code SupportSQLiteOpenHelper} and its
   * dependencies.
   *
   * Being a {@code Provider<SupportSQLiteOpenHelper>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideOpenHelperProvidesAdapter extends ProvidesBinding<SupportSQLiteOpenHelper> {
    private final TestActivityModule module;

    private Binding<MaterialisticDatabase> database;

    public ProvideOpenHelperProvidesAdapter(TestActivityModule module) {
      super("androidx.sqlite.db.SupportSQLiteOpenHelper", NOT_SINGLETON, "io.github.hidroh.materialistic.TestActivityModule", "provideOpenHelper");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      database = (Binding<MaterialisticDatabase>) linker.requestBinding("io.github.hidroh.materialistic.data.MaterialisticDatabase", TestActivityModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings,
        Set<Binding<?>> injectMembersBindings) {
      getBindings.add(database);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<SupportSQLiteOpenHelper>}.
     */
    @Override
    public SupportSQLiteOpenHelper get() {
      return module.provideOpenHelper(database.get());
    }
  }
}
