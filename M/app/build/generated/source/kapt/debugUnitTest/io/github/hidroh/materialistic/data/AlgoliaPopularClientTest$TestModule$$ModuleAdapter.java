// Code generated by dagger-compiler.  Do not edit.
package io.github.hidroh.materialistic.data;

import dagger.internal.BindingsGroup;
import dagger.internal.ModuleAdapter;
import dagger.internal.ProvidesBinding;
import java.lang.Class;
import java.lang.Override;
import java.lang.String;
import rx.Scheduler;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @dagger.Provides} methods.
 */
public final class AlgoliaPopularClientTest$TestModule$$ModuleAdapter extends ModuleAdapter<AlgoliaPopularClientTest.TestModule> {
  private static final String[] INJECTS = { "members/io.github.hidroh.materialistic.data.AlgoliaPopularClientTest", "members/io.github.hidroh.materialistic.data.AlgoliaPopularClient", };

  private static final Class<?>[] STATIC_INJECTIONS = { };

  private static final Class<?>[] INCLUDES = { };

  public AlgoliaPopularClientTest$TestModule$$ModuleAdapter() {
    super(AlgoliaPopularClientTest.TestModule.class, INJECTS, STATIC_INJECTIONS, true /*overrides*/, INCLUDES, true /*complete*/, false /*library*/);
  }

  @Override
  public AlgoliaPopularClientTest.TestModule newModule() {
    return new AlgoliaPopularClientTest.TestModule();
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(BindingsGroup bindings, AlgoliaPopularClientTest.TestModule module) {
    bindings.contributeProvidesBinding("@javax.inject.Named(value=hn)/io.github.hidroh.materialistic.data.ItemManager", new ProvideHackerNewsClientProvidesAdapter(module));
    bindings.contributeProvidesBinding("@javax.inject.Named(value=main)/rx.Scheduler", new ProvideMainThreadSchedulerProvidesAdapter(module));
    bindings.contributeProvidesBinding("io.github.hidroh.materialistic.data.RestServiceFactory", new ProvideRestServiceFactoryProvidesAdapter(module));
  }

  /**
   * A {@code Binding<ItemManager>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<ItemManager>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideHackerNewsClientProvidesAdapter extends ProvidesBinding<ItemManager> {
    private final AlgoliaPopularClientTest.TestModule module;

    public ProvideHackerNewsClientProvidesAdapter(AlgoliaPopularClientTest.TestModule module) {
      super("@javax.inject.Named(value=hn)/io.github.hidroh.materialistic.data.ItemManager", IS_SINGLETON, "io.github.hidroh.materialistic.data.AlgoliaPopularClientTest.TestModule", "provideHackerNewsClient");
      this.module = module;
      setLibrary(false);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<ItemManager>}.
     */
    @Override
    public ItemManager get() {
      return module.provideHackerNewsClient();
    }
  }

  /**
   * A {@code Binding<Scheduler>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<Scheduler>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideMainThreadSchedulerProvidesAdapter extends ProvidesBinding<Scheduler> {
    private final AlgoliaPopularClientTest.TestModule module;

    public ProvideMainThreadSchedulerProvidesAdapter(AlgoliaPopularClientTest.TestModule module) {
      super("@javax.inject.Named(value=main)/rx.Scheduler", IS_SINGLETON, "io.github.hidroh.materialistic.data.AlgoliaPopularClientTest.TestModule", "provideMainThreadScheduler");
      this.module = module;
      setLibrary(false);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<Scheduler>}.
     */
    @Override
    public Scheduler get() {
      return module.provideMainThreadScheduler();
    }
  }

  /**
   * A {@code Binding<RestServiceFactory>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<RestServiceFactory>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideRestServiceFactoryProvidesAdapter extends ProvidesBinding<RestServiceFactory> {
    private final AlgoliaPopularClientTest.TestModule module;

    public ProvideRestServiceFactoryProvidesAdapter(AlgoliaPopularClientTest.TestModule module) {
      super("io.github.hidroh.materialistic.data.RestServiceFactory", IS_SINGLETON, "io.github.hidroh.materialistic.data.AlgoliaPopularClientTest.TestModule", "provideRestServiceFactory");
      this.module = module;
      setLibrary(false);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<RestServiceFactory>}.
     */
    @Override
    public RestServiceFactory get() {
      return module.provideRestServiceFactory();
    }
  }
}
