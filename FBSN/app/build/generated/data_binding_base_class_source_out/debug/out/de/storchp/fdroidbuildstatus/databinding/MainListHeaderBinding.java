// Generated by view binder compiler. Do not edit!
package de.storchp.fdroidbuildstatus.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.GridLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import de.storchp.fdroidbuildstatus.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class MainListHeaderBinding implements ViewBinding {
  @NonNull
  private final GridLayout rootView;

  @NonNull
  public final GridLayout buildStatus;

  @NonNull
  public final TextView buildStatusBuilds;

  @NonNull
  public final TextView buildStatusBuildsBuild;

  @NonNull
  public final TextView buildStatusBuildsRunning;

  @NonNull
  public final TextView buildStatusBuildsUpdate;

  @NonNull
  public final TextView buildStatusEnd;

  @NonNull
  public final TextView buildStatusEndBuild;

  @NonNull
  public final TextView buildStatusEndRunning;

  @NonNull
  public final TextView buildStatusEndUpdate;

  @NonNull
  public final TextView buildStatusHeadBuild;

  @NonNull
  public final TextView buildStatusHeadRunning;

  @NonNull
  public final TextView buildStatusHeadUpdate;

  @NonNull
  public final TextView buildStatusLastModified;

  @NonNull
  public final TextView buildStatusLastModifiedBuild;

  @NonNull
  public final TextView buildStatusLastModifiedRunning;

  @NonNull
  public final TextView buildStatusLastModifiedUpdate;

  @NonNull
  public final TextView buildStatusStart;

  @NonNull
  public final TextView buildStatusStartBuild;

  @NonNull
  public final TextView buildStatusStartRunning;

  @NonNull
  public final TextView buildStatusStartUpdate;

  private MainListHeaderBinding(@NonNull GridLayout rootView, @NonNull GridLayout buildStatus,
      @NonNull TextView buildStatusBuilds, @NonNull TextView buildStatusBuildsBuild,
      @NonNull TextView buildStatusBuildsRunning, @NonNull TextView buildStatusBuildsUpdate,
      @NonNull TextView buildStatusEnd, @NonNull TextView buildStatusEndBuild,
      @NonNull TextView buildStatusEndRunning, @NonNull TextView buildStatusEndUpdate,
      @NonNull TextView buildStatusHeadBuild, @NonNull TextView buildStatusHeadRunning,
      @NonNull TextView buildStatusHeadUpdate, @NonNull TextView buildStatusLastModified,
      @NonNull TextView buildStatusLastModifiedBuild,
      @NonNull TextView buildStatusLastModifiedRunning,
      @NonNull TextView buildStatusLastModifiedUpdate, @NonNull TextView buildStatusStart,
      @NonNull TextView buildStatusStartBuild, @NonNull TextView buildStatusStartRunning,
      @NonNull TextView buildStatusStartUpdate) {
    this.rootView = rootView;
    this.buildStatus = buildStatus;
    this.buildStatusBuilds = buildStatusBuilds;
    this.buildStatusBuildsBuild = buildStatusBuildsBuild;
    this.buildStatusBuildsRunning = buildStatusBuildsRunning;
    this.buildStatusBuildsUpdate = buildStatusBuildsUpdate;
    this.buildStatusEnd = buildStatusEnd;
    this.buildStatusEndBuild = buildStatusEndBuild;
    this.buildStatusEndRunning = buildStatusEndRunning;
    this.buildStatusEndUpdate = buildStatusEndUpdate;
    this.buildStatusHeadBuild = buildStatusHeadBuild;
    this.buildStatusHeadRunning = buildStatusHeadRunning;
    this.buildStatusHeadUpdate = buildStatusHeadUpdate;
    this.buildStatusLastModified = buildStatusLastModified;
    this.buildStatusLastModifiedBuild = buildStatusLastModifiedBuild;
    this.buildStatusLastModifiedRunning = buildStatusLastModifiedRunning;
    this.buildStatusLastModifiedUpdate = buildStatusLastModifiedUpdate;
    this.buildStatusStart = buildStatusStart;
    this.buildStatusStartBuild = buildStatusStartBuild;
    this.buildStatusStartRunning = buildStatusStartRunning;
    this.buildStatusStartUpdate = buildStatusStartUpdate;
  }

  @Override
  @NonNull
  public GridLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static MainListHeaderBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static MainListHeaderBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.main_list_header, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static MainListHeaderBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      GridLayout buildStatus = (GridLayout) rootView;

      id = R.id.build_status_builds;
      TextView buildStatusBuilds = ViewBindings.findChildViewById(rootView, id);
      if (buildStatusBuilds == null) {
        break missingId;
      }

      id = R.id.build_status_builds_build;
      TextView buildStatusBuildsBuild = ViewBindings.findChildViewById(rootView, id);
      if (buildStatusBuildsBuild == null) {
        break missingId;
      }

      id = R.id.build_status_builds_running;
      TextView buildStatusBuildsRunning = ViewBindings.findChildViewById(rootView, id);
      if (buildStatusBuildsRunning == null) {
        break missingId;
      }

      id = R.id.build_status_builds_update;
      TextView buildStatusBuildsUpdate = ViewBindings.findChildViewById(rootView, id);
      if (buildStatusBuildsUpdate == null) {
        break missingId;
      }

      id = R.id.build_status_end;
      TextView buildStatusEnd = ViewBindings.findChildViewById(rootView, id);
      if (buildStatusEnd == null) {
        break missingId;
      }

      id = R.id.build_status_end_build;
      TextView buildStatusEndBuild = ViewBindings.findChildViewById(rootView, id);
      if (buildStatusEndBuild == null) {
        break missingId;
      }

      id = R.id.build_status_end_running;
      TextView buildStatusEndRunning = ViewBindings.findChildViewById(rootView, id);
      if (buildStatusEndRunning == null) {
        break missingId;
      }

      id = R.id.build_status_end_update;
      TextView buildStatusEndUpdate = ViewBindings.findChildViewById(rootView, id);
      if (buildStatusEndUpdate == null) {
        break missingId;
      }

      id = R.id.build_status_head_build;
      TextView buildStatusHeadBuild = ViewBindings.findChildViewById(rootView, id);
      if (buildStatusHeadBuild == null) {
        break missingId;
      }

      id = R.id.build_status_head_running;
      TextView buildStatusHeadRunning = ViewBindings.findChildViewById(rootView, id);
      if (buildStatusHeadRunning == null) {
        break missingId;
      }

      id = R.id.build_status_head_update;
      TextView buildStatusHeadUpdate = ViewBindings.findChildViewById(rootView, id);
      if (buildStatusHeadUpdate == null) {
        break missingId;
      }

      id = R.id.build_status_last_modified;
      TextView buildStatusLastModified = ViewBindings.findChildViewById(rootView, id);
      if (buildStatusLastModified == null) {
        break missingId;
      }

      id = R.id.build_status_last_modified_build;
      TextView buildStatusLastModifiedBuild = ViewBindings.findChildViewById(rootView, id);
      if (buildStatusLastModifiedBuild == null) {
        break missingId;
      }

      id = R.id.build_status_last_modified_running;
      TextView buildStatusLastModifiedRunning = ViewBindings.findChildViewById(rootView, id);
      if (buildStatusLastModifiedRunning == null) {
        break missingId;
      }

      id = R.id.build_status_last_modified_update;
      TextView buildStatusLastModifiedUpdate = ViewBindings.findChildViewById(rootView, id);
      if (buildStatusLastModifiedUpdate == null) {
        break missingId;
      }

      id = R.id.build_status_start;
      TextView buildStatusStart = ViewBindings.findChildViewById(rootView, id);
      if (buildStatusStart == null) {
        break missingId;
      }

      id = R.id.build_status_start_build;
      TextView buildStatusStartBuild = ViewBindings.findChildViewById(rootView, id);
      if (buildStatusStartBuild == null) {
        break missingId;
      }

      id = R.id.build_status_start_running;
      TextView buildStatusStartRunning = ViewBindings.findChildViewById(rootView, id);
      if (buildStatusStartRunning == null) {
        break missingId;
      }

      id = R.id.build_status_start_update;
      TextView buildStatusStartUpdate = ViewBindings.findChildViewById(rootView, id);
      if (buildStatusStartUpdate == null) {
        break missingId;
      }

      return new MainListHeaderBinding((GridLayout) rootView, buildStatus, buildStatusBuilds,
          buildStatusBuildsBuild, buildStatusBuildsRunning, buildStatusBuildsUpdate, buildStatusEnd,
          buildStatusEndBuild, buildStatusEndRunning, buildStatusEndUpdate, buildStatusHeadBuild,
          buildStatusHeadRunning, buildStatusHeadUpdate, buildStatusLastModified,
          buildStatusLastModifiedBuild, buildStatusLastModifiedRunning,
          buildStatusLastModifiedUpdate, buildStatusStart, buildStatusStartBuild,
          buildStatusStartRunning, buildStatusStartUpdate);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
